{"componentChunkName":"component---src-templates-note-template-tsx","path":"/rust/","result":{"data":{"markdownRemark":{"html":"<h2>Getting Started</h2>\n<p><code>cargo init</code> create project\n<code>cargo run</code> run project</p>\n<h2>Error Handling</h2>\n<p>Result class</p>\n<pre><code class=\"language-rust\">fn error_me(throw: bool) -> Result&#x3C;(), usize> {\n    if throw {\n        return Err(7)\n    }\n\n    return Ok(())\n}\n\n// same return type makes this easy\nfn main() -> Result&#x3C;(), usize> {\n    // ? will unwrap the value\n    error_me(false)?;\n    return Ok(())\n}\n</code></pre>\n<p><code>.expect(\"this failed because blah\")</code> throw error and crash</p>\n<h3>Using <code>anyhow</code></h3>\n<pre><code class=\"language-rust\">use std::path::PathBuf;\n\nuse anyhow::{Result, anyhow, Context,};\n\nfn error_me(throw: bool) -> Result&#x3C;()> {\n    if throw {\n        return Err(anyhow!(\"this should never be true\"));\n    }\n\n    std::fs::read(PathBuf::from(\"/foo\")).context(\"hey unable to do this\")?;\n\n    return Ok(());\n}\n\nfn main() -> Result&#x3C;()> {\n    error_me(false)?;\n    return Ok(())\n}\n</code></pre>\n<h2>Structs</h2>\n<pre><code class=\"language-rust\">#[derive(Debug)]\nstruct RustLangStruct {\n    y i32\n    x i32\n}\n\nfn new_struct(x i32, y i32) -> RustLangStruct {\n    return RustLangStruct{x, y}; // x will equal x, uses name, not order\n}\n\nfunc main() {\n    println!(\"{:?}\\n\", new_struct(9, 6));\n}\n</code></pre>\n<h2>Traits</h2>\n<ul>\n<li>use traits to add behavior</li>\n</ul>","frontmatter":{"date":"March 11, 2023","title":"rust","tags":["language"]}}},"pageContext":{"slug":"/rust/"}},"staticQueryHashes":["1865044719","3489759178","3649515864"],"slicesMap":{}}