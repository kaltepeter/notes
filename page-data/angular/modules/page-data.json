{"componentChunkName":"component---src-templates-note-template-tsx","path":"/angular/modules/","result":{"data":{"markdownRemark":{"html":"<h1>Angular Modules</h1>\n<h2>Export Only vs. Import/Export</h2>\n<p>The <code>HeaderComponent</code> is dependent on a material module. This module needs the import.</p>\n<pre><code class=\"language-typescript\">@NgModule({\n  declarations: [SharedUiComponent, HeaderComponent],\n  imports: [\n    MaterialModule\n  ],\n  exports: [SharedUiComponent, HeaderComponent, MaterialModule]\n})\nexport class SharedUiModule { }\n</code></pre>\n<p>This module re-exports material modules for use in other modules. This works, however, I am not sure this is correct.\n<strong>ANTI-PATTERN WARNING</strong>: Using a shared material module makes any import of this module import all material modules in the application, versus a single or handful of needed modules. It becomes really apparent when using lazy-loaded modules.\n-- <a href=\"https://indepth.dev/posts/1191/stop-using-shared-material-module\">https://indepth.dev/posts/1191/stop-using-shared-material-module</a></p>\n<p>I think the exception would be if you put this module in vendor and loaded once in the app and than used webpack externals and/or module federation to re-use.</p>\n<pre><code class=\"language-typescript\">@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n  ],\n  exports: [MatToolbarModule]\n})\nexport class MaterialModule { }\n</code></pre>","frontmatter":{"date":null,"title":"","tags":null}}},"pageContext":{"slug":"/angular/modules/"}},"staticQueryHashes":["3649515864"]}