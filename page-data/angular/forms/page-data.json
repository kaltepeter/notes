{"componentChunkName":"component---src-templates-note-template-tsx","path":"/angular/forms/","result":{"data":{"markdownRemark":{"html":"<h2>Reactive Forms</h2>\n<h2>Custom Validators</h2>\n<ul>\n<li><a href=\"https://netbasal.com/adding-integrated-validation-to-custom-form-controls-in-angular-dc55e49639ae\">Adding Integrated Validation to Custom Form Controls in Angular</a></li>\n<li><a href=\"https://indepth.dev/posts/1319/the-best-way-to-implement-custom-validators\">The best way to implement custom validators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/54533202/add-validation-to-angular-material-disabled-field\">Add validation to Angular material disabled field</a></li>\n<li><a href=\"https://blog.angular-university.io/angular-custom-validators/\">Angular Custom Form Validators: Complete Guide</a></li>\n<li><a href=\"https://netbasal.com/adding-integrated-validation-to-custom-form-controls-in-angular-dc55e49639ae\">Adding Integrated Validation to Custom Form Controls in Angular</a></li>\n</ul>\n<h2>Control Value Accessor</h2>\n<h3>Use Case</h3>\n<ul>\n<li>Non-native form control elements</li>\n<li>Custom styling / functionality</li>\n<li>Control wrapped with related elements</li>\n<li>Parser / formatter directives</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://angular.io/api/forms/ControlValueAccessor\">ControlValueAccessor</a></li>\n<li><a href=\"https://indepth.dev/posts/1055/never-again-be-confused-when-implementing-controlvalueaccessor-in-angular-forms\">Never again be confused when implementing ControlValueAccessor in Angular forms</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=CD_t3m2WMM8\">Kara Erickson's AngularConnect 2017 talk</a></li>\n<li><a href=\"https://material.angular.io/guide/creating-a-custom-form-field-control#form-field-custom-control\">Custom Material control example and details</a></li>\n<li><a href=\"https://timdeschryver.dev/blog/working-with-angular-forms-in-an-enterprise-environment#input-form-fields\">Working with Angular forms in an enterprise environment</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=kVbLSN0AW-Y\">The Control Value Accessor | Jennifer Wadella</a></li>\n<li><a href=\"https://jenniferwadella.com/blog/understanding-angulars-control-value-accessor-interface\">Understanding Angular's Control Value Accessor Interface</a></li>\n<li><a href=\"https://github.com/tehfedaykin/galaxy-rating-app\">Galaxy Rating App</a></li>\n<li><a href=\"https://blog.woodies11.dev/how-to-properly-implement-controlvalueaccessor/\">How to PROPERLY implement ControlValueAccessor - Angular Form</a></li>\n<li><a href=\"https://blog.angular-university.io/angular-custom-form-controls/\">Angular Custom Form Controls: Complete Guide</a></li>\n</ul>\n<h3>Details of CVA (Control Value Accessor)</h3>\n<p><code>writeValue</code>: called when the form control is instantiated, when setValue, or patchValue are called. Called when programatic changes from model to view are called (outside CVA)</p>\n<p><code>registerOnChange(fn)</code>: let the parent know a value changed. e.g. <code>name.valueChanges.subscribe</code> on the parent. onChange is called when the CVA needs to propagate view to model changes upward.</p>\n<p><code>registerOnTouched(fn)</code>: let the parent know a component was interacted with, like validation. e.g. <code>name.touched</code> on the parent. Adds the class 'ng-touched'</p>\n<p><code>setDisabledState</code>: <em>optional</em> called when the form is instantiated if the disabled key is present and when .enabled() or .disabled() are called.</p>\n<h4>Tips (from Jennifer's talk)</h4>\n<ul>\n<li>Keep wrapper components dumb</li>\n<li>Just input/output form values</li>\n<li>Leave validation logic to the parent form component</li>\n<li>CVA can be used with any form API</li>\n</ul>\n<h3>Implementation</h3>\n<ol>\n<li>\n<p>Add a lookup to the NgControl to the custructor of your custom control.</p>\n<p><strong>NOTE</strong>: Alternate approach is using <a href=\"https://indepth.dev/posts/1055/never-again-be-confused-when-implementing-controlvalueaccessor-in-angular-forms#implementing-custom-value-accessor\"><code>NG_VALUE_ACCESSOR</code></a></p>\n<pre><code class=\"language-typescript\">// @Optional is required for unit testing to work\nconstructor(@Optional() @Self() public controlDir: NgControl) {\n    controlDir.valueAccessor = this;\n}\n</code></pre>\n</li>\n<li>\n<p>Implement the ControlValueAccessor interface</p>\n<pre><code class=\"language-typescript\">@Component({\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  providers: [],\n  selector: \"my-custom-field\",\n  styleUrls: [\"./my-custom-field.component.scss\"],\n  templateUrl: \"./my-custom-field.component.html\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MyCustomFieldComponent\n  implements ControlValueAccessor, OnInit\n{\n  disabled: boolean;\n  // if you need special handling use a getter/setter\n  _value: string;\n  // ... constructor from first step\n\n  onChanged = (v: string): void => {}\n  onTouched = (): void => {}\n\n  writeValue(obj: any): void {\n    this._value = value;\n  }\n\n  registerOnChange(fn: (v: string) => void): void {\n    this.onChanged = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  sweetChange($event) {\n    this.onTouched();\n    this.onChanged($event.currentTarget.value)\n  }\n}\n</code></pre>\n<pre><code class=\"language-html\">&#x3C;input (change)=\"sweetChange($event)\" type=\"text\" />\n</code></pre>\n</li>\n<li>\n<p>To add validators to custom field</p>\n<pre><code class=\"language-typescript\">ngOnInit(): void {\n    const control = this.controlDir.control\n    let validators = control.validator\n      ? [control.validator, Validators.required]\n      : Validators.required\n    control.setValidators(validators)\n    control.updateValueAndValidity()\n}\n</code></pre>\n</li>\n<li>\n<p>Bind to the reactive form with <code>formControlName</code> and configuring a formGroup.</p>\n<pre><code class=\"language-html\">&#x3C;form [formGroup]=\"myForm\">\n  &#x3C;my-custom-field formControlName=\"dynamicText\">&#x3C;/my-custom-field>\n&#x3C;/form>\n</code></pre>\n<pre><code class=\"language-typescript\">@Component({\n    standalone: true,\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        MyCustomFieldComponent\n    ],\n    selector: 'my-form',\n    styleUrls: ['./my-form.component.scss'],\n    templateUrl: './my-form.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n})\nexport class MyFormComponent implements OnInit {\n    myForm: FormGroup;\n\n    constructor(private fb: FormBuilder) {}\n\n    ngOnInit() {\n        this.myForm: FormGroup = this.formBuilder.group(\n        {\n            name: ['', [Validators.required]],\n            dynamicText: ['', [Validators.required]]\n        },\n        { validators: customFormValidator }\n    }\n}\n</code></pre>\n</li>\n</ol>\n<h3>Issues</h3>\n<h4>Infinite loop with writeValue and set value</h4>\n<ul>\n<li>\n<p>Don't call onChange from the value setter</p>\n</li>\n<li>\n<p><a href=\"https://blog.woodies11.dev/how-to-properly-implement-controlvalueaccessor/\">How to PROPERLY implement ControlValueAccessor - Angular Form</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/a/46743580/3195475\">Why do I need call onChange and onTouch in writeValue when implementing ControlValueAccessor in Angular?</a></p>\n</li>\n</ul>\n<h2>Composition</h2>\n<ul>\n<li><a href=\"https://tomastrajan.medium.com/angular-reactive-sub-forms-type-safe-without-duplication-dbd24225e1e8\">https://tomastrajan.medium.com/angular-reactive-sub-forms-type-safe-without-duplication-dbd24225e1e8</a></li>\n<li><a href=\"https://medium.com/angular-in-depth/reducing-the-forms-boilerplate-make-your-angular-forms-reusable-ee06d7c07f47\">https://medium.com/angular-in-depth/reducing-the-forms-boilerplate-make-your-angular-forms-reusable-ee06d7c07f47</a></li>\n</ul>","frontmatter":{"date":"January 13, 2023","title":"Angular Forms","tags":["ui","framework","angular"]}}},"pageContext":{"slug":"/angular/forms/"}},"staticQueryHashes":["1865044719","3489759178","3649515864"],"slicesMap":{}}