{"componentChunkName":"component---src-templates-note-template-tsx","path":"/workshops/fem/fem-dev-productivity-v2/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://frontendmasters.com/workshops/developer-productivity-v2/#player\">https://frontendmasters.com/workshops/developer-productivity-v2/#player</a></p>\n<p><a href=\"https://frontendmasters.github.io/dev-prod-2/\">https://frontendmasters.github.io/dev-prod-2/</a></p>\n<p><a href=\"https://github.com/theprimeagen/dev\">https://github.com/theprimeagen/dev</a></p>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\nscript_dir=\"$(cd $(dirname \"${BASH_SOURCE[0]}\") &#x26;&#x26; pwd)\"\nfilter=\"\"\ndry=\"0\"\n\ncd $script_dir\nscripts=$(find runs -maxdepth 1 -mindepth 1 -executable -type f)\n\nwhile [[ $# > 0 ]]; do\n    if [[ \"$1\" == \"--dry\" ]]; then\n        dry=\"1\"\n    else\n        filter=\"$1\"\n    fi\n    shift\ndone\n\nlog() {\n    if [[ $dry == \"1\" ]]; then\n        echo \"[DRY_RUN]: $@\"\n    else\n        echo \"$@\"\n    fi\n}\n\nexecute() {\n    log \"execute: $@\"\n    if [[ $dry == \"1\" ]]; then\n        return\n    fi\n\n    \"$@\"\n}\n\nlog \"run: filter=$filter\"\n\nfor script in $scripts; do\n    if echo \"$script\" | grep -qv \"$filter\"; then\n        log \"filtered: $filter -- $script\"\n        continue\n    fi\n    log \"running script: $script\"\n    execute ./$script\ndone\n</code></pre>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\ngit clone git@github.com:neovim/neovim.git ~/personal/neovim\ncd ~/personal/neovim\ngit fetch\ngit checkout v0.9.2\n\nsudo apt install cmake gettext lua5.1 liblua5.1-0-dev\nmake CMAKE_BUILD_TYPE=RelWithDebInfo\nsudo make install\n</code></pre>\n<h2>dotfiles</h2>\n<p><code>pushd</code> pushes location onto stack.\n<code>popd</code> pops location off stack.</p>\n<p><code>$XDG_CONFIG_HOME</code> is a nix thing that is usually <code>~/.config</code></p>\n<p>Mac doesn't natively support it. <a href=\"https://stackoverflow.com/questions/3373948/equivalents-of-xdg-config-home-and-xdg-data-home-on-mac-os-x\">https://stackoverflow.com/questions/3373948/equivalents-of-xdg-config-home-and-xdg-data-home-on-mac-os-x</a></p>\n<p>For macOS, the equivalent locations are typically:</p>\n<p><code>$XDG_CONFIG_HOME</code> can be set to <code>~/Library/Application Support</code> or <code>~/.config</code>.\n<code>$XDG_DATA_HOME</code> can be set to <code>~/Library/Application Support</code> or <code>~/.local/share</code>.\n<code>$XDG_CACHE_HOME</code> can be set to <code>~/Library/Caches</code> or <code>~/.cache</code>.</p>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\ndry=\"0\"\nXDG_CONFIG_HOME=\"$HOME/.fem-config\"\n\nwhile [[ $# > 0 ]]; do\n    if [[ \"$1\" == \"--dry\" ]]; then\n        dry=\"1\"\n    fi\n    shift\ndone\n\nlog() {\n    if [[ $dry == \"1\" ]]; then\n        echo \"[DRY_RUN]: $@\"\n    else\n        echo \"$@\"\n    fi\n}\n\nexecute() {\n    log \"execute: $@\"\n    if [[ $dry == \"1\" ]]; then\n        return\n    fi\n\n    \"$@\"\n}\n\nlog \"--------- dev-env ---------\"\n\ncopy_dir() {\n    from=$1\n    to=$2\n\n    pushd $from > /dev/null\n    dirs=$(find . -mindepth 1 -maxdepth 1 -type d)\n    for dir in $dirs; do\n        execute rm -rf $to/$dir\n        execute cp -r $dir $to/$dir\n    done\n    popd > /dev/null\n}\n\ncopy_file() {\n    from=$1\n    to=$2\n\n    name=$(basename $from)\n\n    execute rm $to/$name\n    execute cp $from $to/$name\n}\n\ncopy_dir .config $XDG_CONFIG_HOME\ncopy_file .specialconfig $HOME\n</code></pre>\n<h2>Navigation</h2>\n<h3>window manager</h3>\n<ul>\n<li><a href=\"https://github.com/pop-os/shell?utm_source=taoofmac.com&#x26;utm_medium=web&#x26;utm_campaign=unsolicited_traffic&#x26;utm_content=external_link\">pop os</a></li>\n<li><a href=\"https://i3wm.org/\">i3</a></li>\n<li><a href=\"https://awesomewm.org/\">awesomewm</a></li>\n<li><a href=\"https://leftwm.org/\">leftwm</a></li>\n<li><a href=\"https://github.com/koekeishiya/yabai\">yabai (mac)</a></li>\n</ul>\n<p>user mentioned</p>\n<ul>\n<li><a href=\"https://magnet.crowdcafe.com/?utm_source=taoofmac.com&#x26;utm_medium=web&#x26;utm_campaign=unsolicited_traffic&#x26;utm_content=external_link\">magnet</a></li>\n<li><a href=\"https://rectangleapp.com/\">rectangle</a></li>\n</ul>\n<h3>opening programs</h3>\n<ul>\n<li><a href=\"https://github.com/davatorium/rofi\">rofi</a></li>\n<li><a href=\"https://linux.die.net/man/1/dmenu\">dmenu</a></li>\n<li>mac: built in finder</li>\n</ul>\n<h2>terminal experience</h2>\n<ul>\n<li>\n<p>sessions that last even when i close my terminal</p>\n</li>\n<li>\n<p>multiple running sessions, and these sessions are based on directory</p>\n</li>\n<li>\n<p>\"tabs\" within a session</p>\n</li>\n<li>\n<p>navigate to any session by directory name \"instantly\"</p>\n</li>\n<li>\n<p>navigate to any session by directory with fuzzy find</p>\n</li>\n<li>\n<p>run scripts or whatever programs i want when navigating to a directory</p>\n</li>\n<li>\n<p><a href=\"https://github.com/tmux/tmux\">tmux</a></p>\n</li>\n<li>\n<p><a href=\"https://wezfurlong.org/wezterm/index.html\">WezTerm</a></p>\n</li>\n<li>\n<p><a href=\"https://ghostty.org/\">ghostty</a></p>\n</li>\n<li>\n<p><a href=\"https://zellij.dev/\">Zellij</a></p>\n</li>\n</ul>\n<p><code>brew install tmux</code>\n<code>brew install --cask ghostty</code></p>\n<h3>tmux</h3>\n<pre><code class=\"language-conf\">set -g default-terminal \"tmux-256color\"\nset -s escape-time 0\nset -g base-index 1\n\n# optional -- i like C-a not C-b (pure preference)\nunbind C-b\nset-option -g prefix C-a\nbind-key C-a send-prefix\n\n# vi key movement for copy/pasta mode\nset-window-option -g mode-keys vi\nbind -T copy-mode-vi v send-keys -X begin-selection\nbind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'\n\n# &#x3C;WHERE YOUR TMUX CONF GOES> = XDG_CONFIG_HOME/tmux/tmux.conf\n# &#x3C;WHERE YOUR TMUX CONF GOES> = ~/.tmux.conf\nbind r source-file &#x3C;WHERE YOUR TMUX CONF GOES> \\; display-message \"tmux.conf reloaded\"\n</code></pre>\n<p>default prefix is <code>ctrl + b</code>, if you used ^^ it will be <code>ctrl + a</code></p>\n<p><code>prefix + c</code> creating window\n<code>prefix + d</code> detaching\n<code>prefix + num</code> navigate to that window num\n<code>tmux attach</code> or <code>tmux a</code> attach previous session\n<code>prefix + w</code> showing all running sessions\n<code>x</code> in show all running sesions will kill session\n<code>ctrl + d</code> kill terminal and pane / window / session\n<code>prefix + \"</code> horizontal split\n<code>prefix + %</code> vertical split\n<code>prefix + z</code> focus on pane, repeat to unfocus\n<code>prefix + L</code> go back to previous session</p>\n<p>navigating can be confusing, can be mapped to vim keys</p>\n<pre><code class=\"language-conf\">bind -r h select-pane -L\nbind -r j select-pane -D\nbind -r k select-pane -U\nbind -r l select-pane -R\n</code></pre>\n<p><code>tmux new-session -s &#x3C;sname> -n &#x3C;initial wname> -d[etach]</code> create a new session and detach current session\n<code>tmux list-sessions</code> list all sessions\n<code>tmux attach-session -t &#x3C;target></code>\n<code>tmux has-session -t &#x3C;target></code> # don't forget -t vs -t=, <code>-t</code> is first part of match, <code>-t=</code> is exact match\n<code>tmux switch-client -t &#x3C;target></code></p>\n<p><code>tmux new-window -n &#x3C;name> [-t session:window_index]</code> or <code>tmux neww</code> create new window\n<code>tmux list-windows [-t session]</code> list all windows\n<code>tmux select-window -t session:[window_idx | window_name].[pane_idx]</code> select window</p>\n<p><code>tmux send-keys -t &#x3C;target> \"text\" [ctrl keys,...]</code> sends commands to target. e.g. <code>tmux send-keys -t dev:foobar \"echo hello\"</code>. adding <code>^M</code> will execute the command. e.g. <code>tmux send-keys -t dev:foobar \"echo hello\" ^M</code></p>\n<h3>opening script</h3>\n<p>create <code>.local/scripts</code> in your dotfile repo. Add a file called <code>ready-tmux</code> in scripts and paste thee following:</p>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\nif [[ -x ./.ready-tmux ]]; then\n    ./.ready-tmux\nelif [[ -x ~/.ready-tmux ]]; then\n    ~/.ready-tmux\nfi\nclear\n</code></pre>\n<p>add the script to your path.</p>\n<pre><code class=\"language-bash\">export PATH=\"$HOME/.local/scripts:$PATH\"\n</code></pre>\n<p>create another file in any directory called <code>.ready-tmux</code> and paste the following:</p>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\ntmux new-window -n foofoo\n</code></pre>\n<p>naviate to the directory with the <code>.ready-tmux</code> file. Enter <code>tmux</code> and run <code>ready-tmux</code>.</p>\n<h2>fcf</h2>\n<p><a href=\"https://junegunn.github.io/fzf/\">https://junegunn.github.io/fzf/</a></p>\n<p><code>brew install fzf</code></p>\n<p><code>source &#x3C;(fzf --zsh)</code> to zsh config.</p>\n<p>notice <code>ctrl + r</code> is a fuzzy finder.</p>\n<p><code>echo \"1\\n2\\n3\\n\" | fzf</code> will display a selectable list. Choossing the option will echo that one.</p>\n<h2>tmux sessionizer</h2>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\nselected=$(find ~/personal -mindepth 1 -maxdepth 1 -type d | fzf)\nif [[ -z $selected ]]; then\n    exit 0\nfi\n\nselected_name=$(basename \"$selected\" | tr \":,. \" \"____\")\n\nswitch_to() {\n    if [[ -z $TMUX ]]; then\n        tmux attach-session -t \"$selected_name\"\n    else\n        tmux switch-client -t \"$selected_name\"\n    fi\n}\n\nif tmux has-session -t=\"$selected_name\" 2> /dev/null; then\n    switch_to\n    exit 0\nfi\n\ntmux new-session -ds \"$selected_name\" -c \"$selected\"\nswitch_to\ntmux send-keys -t \"$selected_name\" \"ready-tmux\" ^M\n\n</code></pre>\n<p><code>vim.keymap.set(\"n\", \"&#x3C;C-f>\", \"&#x3C;cmd>silent !tmux neww tmux-sessionizer&#x3C;CR>\")</code> in vim to run sessionizer.</p>\n<p><code>bind-keyu -r f run-shell \"tmux neww ~/.local/bin/tmux-sessionizer\"</code> in tmux.conf</p>\n<h2>jq</h2>\n<p><a href=\"https://jqlang.org/\">https://jqlang.org/</a></p>\n<p><code>brew install jq</code></p>\n<p>create a file <code>sample.json</code> with these contents:</p>\n<pre><code class=\"language-json\">{\"type\": \"foo\", \"values\": [1, 2, 3, 4, 5]}\n{\"type\": \"foo\", \"values\": [69, 420, 42, 69420]}\n{\"type\": \"bar\", \"values\": {\"a\": 42, \"b\": 69}}\n{\"type\": \"bar\", \"values\": {\"a\": 1337, \"b\": 420}}\n{\"type\": \"bar\", \"values\": {\"a\": 111, \"b\": 222}}\n</code></pre>\n<pre><code class=\"language-bash\">cat sample.json\ncat sample.json | jq\ncat sample.json | jq -c\n\n# filter by type\ncat sample.json | jq  'select(.type == \"foo\")'\n# get values of filtered items\ncat sample.json | jq  'select(.type == \"foo\") | .values'\n# sum of filtered items values\ncat sample.json | jq  'select(.type == \"foo\") | .values | add' -c\n# add valueSum to each item\ncat sample.json | jq  'select(.type == \"foo\") | .valueSum = (.values | add)' -c\n# select items with sum > 20\ncat sample.json | jq  'select(.type == \"foo\") | .valueSum = (.values | add) | select(.valueSum > 20)' -c\n</code></pre>\n<p>vim <code>!jq</code></p>\n<h2>sed</h2>\n<p>fighting one eyed curvy `\"(.*)\"</p>\n<p>vim: <code>:</code> then <code>%s/: \"\\(.*\\)\",/: \"\\1\\1\",</code></p>\n<p><code>cat sample.json | sed 's/: \"\\(.*\\)\",/: \"\\1,\\1\",/'</code></p>\n<h2>find</h2>\n<pre><code class=\"language-bash\">find . -maxdepth 1 -mindepth 1 -type f -exec grep -Hn \"foo\" {} \\;\n</code></pre>\n<h2>xargs</h2>\n<pre><code class=\"language-bash\">echo \"1\\n2\\n3\" | xargs -I {} curl https://{}.com\n</code></pre>\n<h2>parallel</h2>\n<p><a href=\"https://savannah.gnu.org/projects/parallel/\">https://savannah.gnu.org/projects/parallel/</a></p>\n<p><code>brew install parallel</code></p>\n<p>create a <code>count</code> file with the following contents:</p>\n<pre><code class=\"language-txt\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre>\n<pre><code class=\"language-bash\">cat count | parallel -j 5 \"curl https://{}.com\"\n# preserve order\ncat count | parallel -kj 2 \"curl https://{}.com\"\n</code></pre>\n<h2>awk</h2>\n<pre><code class=\"language-bash\">ps aux | grep vim | awk '{ sum += $2 } END { print sum }'\n</code></pre>\n<h2>editors</h2>\n<p>editor: <a href=\"https://zed.dev/\">https://zed.dev/</a></p>\n<p><a href=\"https://github.com/nvim-lua/kickstart.nvim\">https://github.com/nvim-lua/kickstart.nvim</a></p>\n<p><a href=\"https://frontendmasters.com/courses/vim-fundamentals/\">https://frontendmasters.com/courses/vim-fundamentals/</a></p>\n<p>neovim: use your name to group your configs and avoid conflict</p>\n<h2>vim</h2>\n<p><code>df(</code> delete up to and include <code>(</code>\n<code>dj</code> delete current line and one below\n<code>ct(</code> delete up to and include <code>(</code> and insert\n<code>v</code> visual mode\n<code>ap</code> in visual mode and select the paragraph\n<code>d</code> is delete, combine with <code>ap</code> to delete the paragraph\n<code>yap</code> yank the paragraph\n<code>dip</code> delete inside paragraph\n<code>yiW</code> yank inside word\n<code>ci\"</code> change inside quotes\n<code>d2i(</code> delete up to and include two sets of parentheses\n<code>Vf{%y</code> visual mode and find the next <code>{%</code> and yank it i.e. copy function</p>\n<p>quick fix list from search results to navigate results</p>\n<p><code>:cdo &#x3C;command></code> execute command on all results in the quick fix list</p>\n<p>use:</p>\n<ul>\n<li>stack trace to quick fix list could be useful</li>\n<li>add lsp refs to quick fix list</li>\n</ul>\n<p>harpoon is sticky files for quick swap</p>\n<p><code>%s</code> every line sed</p>\n<p>`%s/mul</p>\n<p><a href=\"https://adventofcode.com/2024/day/3\">https://adventofcode.com/2024/day/3</a></p>\n<p><code>xmul(2,4)%&#x26;mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))</code></p>\n<p>vim:<code>:</code> <code>%s/\\(mul(\\d\\{1,3},\\d\\{1,3})\\)/\\1\\r/g</code></p>\n<p>vim:<code>:</code> <code>%s/.*mul(\\(\\d\\{1,3}\\),\\(\\d\\{1,3}\\))/\\1*\\2/</code></p>\n<p>vim:<code>:</code> <code>s/\\n/+</code>\nvim: <code>V</code> to select line\nvim: <code>:</code> <code>!bc</code></p>\n<p><a href=\"https://frontendmasters.com/learn/fullstack/\">https://frontendmasters.com/learn/fullstack/</a></p>\n<p><code>nvim test.lua</code></p>\n<p><a href=\"https://www.lua.org/\">https://www.lua.org/</a></p>\n<p><code>:so</code> execute lua file</p>\n<p><code>vim.api.nvim_open_win(0, true, { relative = \"win\", row = 3, col = 3, width = 12, height = 3 })</code></p>\n<p><code>ctrl + w</code> to get window commands, <code>o</code> to close all</p>\n<pre><code class=\"language-lua\">local function read_file_with_system(filename)\n  local pipe = vim.system({\"cat\", filename})\n  local content = pipe:wait().stdout\n  local lines = vim.split(content, \"\\n\", { trimempty = true })\n  return lines\nend\n\nlocal api = vim.api\nlocal buf = api.nvim_create_buf(false, true)\nlocal win = api.nvim_open_win(buf, false, {\n    relative=\"editor\",\n    width=80,\n    height=24,\n    row=0,\n    col=0,\n})\napi.nvim_buf_set_lines(buf, 0, -1, false, read_file_with_system(\"./package.json\"))\n\nvim.defer_fn(function()\n    api.nvim_win_close(win, true)\nend, 5000)\n</code></pre>\n<h2>ai</h2>\n<p>ask ai to create a plugin to interface with an ai api</p>\n<h2>vimbegood</h2>\n<p><code>:VimBeGood</code></p>\n<h2>updates</h2>\n<p>edit dev and copy to live location</p>","frontmatter":{"date":"December 05, 2025","title":"Developer Productivity V2","tags":["course"]}}},"pageContext":{"slug":"/workshops/fem/fem-dev-productivity-v2/"}},"staticQueryHashes":["1796642556","2356112386","3489759178"],"slicesMap":{}}