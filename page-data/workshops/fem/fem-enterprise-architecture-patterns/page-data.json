{
    "componentChunkName": "component---src-templates-note-template-tsx",
    "path": "/workshops/fem/fem-enterprise-architecture-patterns/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Course Info</h2>\n<ul>\n<li><a href=\"https://frontendmasters.com/courses/enterprise-patterns/\">https://frontendmasters.com/courses/enterprise-patterns/</a></li>\n<li><a href=\"https://github.com/onehungrymind/fem-enterprise-patterns\">https://github.com/onehungrymind/fem-enterprise-patterns</a></li>\n</ul>\n<h2>Complexity</h2>\n<ul>\n<li><a href=\"https://moss.cs.iit.edu/cs100/papers/out-of-the-tar-pit.pdf\">https://moss.cs.iit.edu/cs100/papers/out-of-the-tar-pit.pdf</a></li>\n</ul>\n<p>The Iron Triangle</p>\n<ul>\n<li>State</li>\n<li>Code Volume</li>\n<li>Flow Control</li>\n</ul>\n<h3>State</h3>\n<ul>\n<li>Shared mutable state is incredibly dangerous</li>\n</ul>\n<p><strong>Solution</strong>: Refactor Methods to depend on inputs and outputs only. i.e. pure functions</p>\n<h3>Flow Control</h3>\n<ul>\n<li>Air traffic control or sequencing methods does not violate SRP, they control flow or coordinate/delegate</li>\n</ul>\n<h3>Axis of Evil</h3>\n<p>It's impossible to write good tests for bad code</p>\n<ul>\n<li>Hidden State</li>\n<li>Violating the SRP</li>\n<li>Nested logic</li>\n</ul>\n<h4>Fixes</h4>\n<ul>\n<li>dependency injection</li>\n<li>extract to function</li>\n</ul>\n<h2>Four Elements of Programming</h2>\n<ul>\n<li>Data structures</li>\n<li>Functions</li>\n<li>Conditionals</li>\n<li>Repeating via Iteration</li>\n</ul>\n<h2>Data Structures</h2>\n<ul>\n<li>Objects are nouns</li>\n<li>Methods are verbs</li>\n</ul>\n<h2>Redux Pattern</h2>\n<ul>\n<li>\n<p><a href=\"https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867\">https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867</a></p>\n</li>\n<li>\n<p>Imutable data is key</p>\n</li>\n<li>\n<p>Slice your state</p>\n</li>\n</ul>\n<h2>Time Management</h2>\n<p>The fifth element of programming.</p>\n<ul>\n<li><a href=\"https://frontendmasters.com/courses/asynchronous-javascript/\">https://frontendmasters.com/courses/asynchronous-javascript/</a></li>\n</ul>\n<h3>Obserable Streams</h3>\n<p>Encapsulate, transport and transform data from user interactions.</p>\n<p>If you are transforming in the subscribe, you are doing wrong. Use the observable to transform to the shape you need.</p>\n<p>Combines the Iterator pattern and Observer pattern.</p>\n<h2>Angular Courses</h2>\n<ul>\n<li><a href=\"https://frontendmasters.com/courses/production-angular/\">https://frontendmasters.com/courses/production-angular/</a></li>\n</ul>","frontmatter":{"date":"February 12, 2022","title":"FEM Enterprise Architecture Patterns","tags":["workshop","front-end-masters"]}}},"pageContext":{"slug":"/workshops/fem/fem-enterprise-architecture-patterns/"}},
    "staticQueryHashes": ["1929983096","3649515864"]}