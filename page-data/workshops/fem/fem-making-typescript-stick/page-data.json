{"componentChunkName":"component---src-templates-note-template-tsx","path":"/workshops/fem/fem-making-typescript-stick/","result":{"data":{"markdownRemark":{"html":"<h1>Making Typescript Stick</h1>\n<p>Make it stick book --> using to write onboarding</p>\n<p><a href=\"https://www.typescript-training.com/course/making-typescript-stick\">https://www.typescript-training.com/course/making-typescript-stick</a></p>\n<pre><code class=\"language-tsx\">// @errors: 2322 2320\nlet first: string &#x26; number\nlet second: String &#x26; Number\n\nfirst = \"abc\"\nsecond = \"abc\"\nsecond = new String(\"abc\")\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/PTAEAEFMCdoe2gZwFygEwGY1vVgDAFAA2kALqAGYCWSpqip0VAdgOagBkozArgLYAjGMTKhEkAMZxmAE1QBlRi3ZcAcvyHQCBarVABeUACIAhgIlGC4qbIPGzFq5Oky7zSAHdQipmwAUpuZGAJRAA\">Playground Link</a></p>\n<ul>\n<li>\n<p>When using the primitive types string and number we can see that the union of these two types results in a never. In other words, there is no string that can be also regarded as a number, and no number that can also be regarded as a `string</p>\n</li>\n<li>\n<p>When using the interface types String and Number, we can see that the union does not result in a never</p>\n</li>\n</ul>\n<p>Use the lowercase types as much as possible. They are primitives.</p>\n<h2>What order do logs print?</h2>\n<pre><code class=\"language-tsx\">function getData() {\n  console.log(\"elephant\")\n  const p = new Promise((resolve) => {\n    console.log(\"giraffe\")\n    resolve(\"lion\")\n    console.log(\"zebra\")\n  })\n  console.log(\"koala\")\n  return p\n}\na...\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAcwKZQCIEMpYBQCUiA3gFCKIQIDOcANqgHR1zJ4BEqDADgBZZgo7AuUo0oibogC8iMKgDuiAAoAnOAFsY1VHjyrUtOgDdURaQD4SoilTBGmLNu2QxVWYMFTCbiA0dMOOngwHwpbGnpHVg4AL1QAI3cwxABfEQj7KOYY9gBrOCw6LBSDKBBVJG5SVNIsagBPSERQSFgERA0sGDBCa0yHHOcIHBS7agl-EDoJWSwFbok0TBx8DLEshiH9Q2moEVrx7KcOABNWHy6ewkYoXlRevst+jcGT9g04OB0fdKA\">Playground Link</a></p>\n<p><code>dog, cat, elephant, giraffe, zebra, koala, lion, moose</code></p>\n<h2>Variadic Tuple Types</h2>\n<pre><code class=\"language-tsx\">enum Sandwich {\n  Hamburger,\n  VeggieBurger,\n  GrilledCheese,\n  BLT\n}\ntype SandwichOrder = [\n  number, // order total\n  Sandwich, // sandwich\n  ...string[] // toppings\n]\n\n\n// ---cut---\n/**\n * return a...\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/KYOwrgtgBAyghiAJgdwJYGMAWUDeAoKKACTggCMwAnAc2EoBoCoA1Ya61YAIStoaYDilVABsRwRAGFMwYAGdgjQlwAyAFTwBfPABcAngAdgsBCgyYA8pUR0oAXigBtJuHJ16UAPSeoAe2u2Or46cCJM8EhoWB7eUHKmUZhMAHSpcjrCINSOALpePkEGBqhZcng5eJWxALS16GA6tdV4ngBUrQStUJTAOlQgUAiDlJRwelDoviAhJSXUUMAAbnR6OphzCwAe6MAGOlBrxgBmqJTpC+IQoDqdnnhHYCDoOqhTB3CiADxqWzqgiHJBiA9LkAHwACiYcBoAC5usA4IgpiJxo5XGR3FBUsk1BUAJS4JiTEDnRwAfVQ1BA-gkHmxPXSeQc0OoTB6fUoAwZN20xPO-hslAAjHCImYsFZBfYnEKAEzJACcCo8YsSyRI5F4mIAROIdH0dtqKng+fsGWARPsHDMROCBXQhXiWj5CIQAHoAfiAA\">Playground Link</a></p>\n<p>Example of cleaning types: <a href=\"https://github.com/ReactiveX/rxjs/pull/5859/files\">https://github.com/ReactiveX/rxjs/pull/5859/files</a></p>\n<h2>Error type unknown</h2>\n<pre><code class=\"language-tsx\">function somethingRisky() {}\n// ---cut---\ntry {\n  somethingRisky()\n} catch (err: unknown) {\n  if (err instanceof Error) throw err\n  else throw new Error(`${err}`)\n}\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAZzgWwKZQBYzAcwCUZkBrATwAoBKRAbwF8AoAehcQFouIQouOmUAE7l6TRCnRZcBYmSrUmDRBACGUCNkSUMQoQC5E4UmDgB3MLTrjEMYNt1DbYZFFWQMcewFE9cIbQ4QuaIjjYYADbIGIhBIWAYZoi+wUKUAAYAJHSODOmKDEA\">Playground Link</a></p>\n<h2>interface vs. type</h2>\n<pre><code class=\"language-tsx\">// @errors: 2300\ntype Color = {\n  red: number\n  green: number\n  blue: number\n}\n\ninterface Color {\n  alpha: number\n}\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/PTAEAEFMCdoe2gZwFygEwGYAMWBQAXATwAdJQBhOAGwVAF5QBvXUUaSAE1QDsBXAWwBGMFqADm7SNx4Dh0UYKq9IMoSIC+uXAEtu+GADMAhgGMylGtCaijVYgAsjqubnVA\">Playground Link</a></p>\n<p>Interfaces are open, types are not. Two interfaces would compile.</p>\n<h2>Learning</h2>\n<p><a href=\"https://github.com/type-challenges/type-challenges\">https://github.com/type-challenges/type-challenges</a></p>\n<pre><code class=\"language-tsx\">// @errors: 2344\ntype Expect&#x3C;T extends true> = T\ntype Equal&#x3C;X, Y> =\n(&#x3C;T>() => T extends X ? 1 : 2) extends\n(&#x3C;T>() => T extends Y ? 1 : 2) ? true : false\n\ntype NotEqual&#x3C;X, Y> = true extends Equal&#x3C;X, Y>...\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZABKkPgC0BwA8vH0AGJFB0E2PKAA3gYAdLeK0ADmqIochADaALqmqHMc8TCgVbMAC+4SBkQ4kAAbjAANwDMCMSCIfCIVI0OAcFGgeLKObEADCcF+4lA-jEwlwoFAAFlFPgZtdoC8uHBhv5RAAGa4AVnCACIZpBFDx+ZF+fhFHMGvzcBisdN4DQANYABUUpGgAGUaAtEAheBIDPcnhEAD7oUAWjDmCmXKmgaAbLYcUAm8RiCTOB3UpwGflK5VixS8eUo0w+yLuz0SNCRv384gamDB0OY8OR1D+xC6xD6pCp0Bh-AR4GpJZkGgh5Gkt4OtqIOajcYuB1UWgMXJVABGcDg4xeWnWm22e3o5NEvf7wo4wjnGnrYEbzbIcep7cgdHoXdUzkwQ+do-2E5cmDnwgX6+om4YkZ39CJK8oO27ACsbweR7tj7bRI+xqwL7vnQc4OhebbXlud6VKokbUqq8DDAskD0FOA6zpe1JYcOLpjieCFsshqF9uhoFYaAlLUuBV4dtuMHjr+oD8vEfb8p+uE-gEJ7Max56YRuUHkfegrCqKVpMZK0qIGxgKHt+9AVnA8Q4nihLErOlEUfxkG3kJ9FwUxgZihaibJtAxlMTmeoGmxBk4UeCkyEpjpwCq6qajq1lIJpVFgbgHzljIoD-uMz5vjepIXA6iioG8e5aDxcD8gF1LdvcqAicoyhJQ6xBOlCZioBwAjDN2MC4MCQA\">Playground Link</a></p>","frontmatter":{"date":"March 23, 2022","title":"Making Typescript Stick","tags":["workshop","front-end-masters"]}}},"pageContext":{"slug":"/workshops/fem/fem-making-typescript-stick/"}},"staticQueryHashes":["1865044719","3489759178","3649515864"],"slicesMap":{}}