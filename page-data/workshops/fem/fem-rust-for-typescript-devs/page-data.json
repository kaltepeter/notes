{"componentChunkName":"component---src-templates-note-template-tsx","path":"/workshops/fem/fem-rust-for-typescript-devs/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"https://theprimeagen.github.io/rust-for-typescript-devs/\">https://theprimeagen.github.io/rust-for-typescript-devs/</a></li>\n<li><a href=\"https://code.visualstudio.com/updates/v1_67#_toggle-inlay-hints\">https://code.visualstudio.com/updates/v1_67#_toggle-inlay-hints</a></li>\n<li><a href=\"https://rust-unofficial.github.io/too-many-lists/index.html\">https://rust-unofficial.github.io/too-many-lists/index.html</a></li>\n</ul>\n<h2>Rust</h2>\n<p><code>!</code> is a macro</p>\n<pre><code class=\"language-rust\">let foo = 5\nlet mut foo = 5 \n</code></pre>\n<p>shadowing</p>\n<pre><code class=\"language-rust\">let foo = 5\nlet foo = 'yo'\n</code></pre>\n<ul>\n<li>only public and private scope</li>\n</ul>\n<p><code>String</code> and <code>&#x26;str</code></p>\n<ul>\n<li>\n<p>strings are heap allocated and mutable</p>\n</li>\n<li>\n<p>&#x26;str is a view of string, immutable, analogous to &#x26;[u8]</p>\n</li>\n<li>\n<p>unwraps and clones are dangerous but will show up</p>\n</li>\n<li>\n<p>destructuring is pattern matching</p>\n</li>\n</ul>\n<p><code>todo!(\"handle this\")</code> will let you move on and explode when called</p>\n<p><code>unreachable!(\"this should never happen\")</code> handle unknowns</p>\n<p><code>foo.unwrap()</code> can't unwrap a none or error value, which is dangerous. Pulls values out, don't use them, good for learning</p>\n<ul>\n<li>value: itself</li>\n<li>reference: readonly reference of the value</li>\n<li>mutable reference: means read and write reference</li>\n</ul>\n<p><code>()</code> is nothing, not like undefined</p>\n<h2>Error handling</h2>\n<ul>\n<li>thiserror, great for creating errors, should be used in libraries</li>\n<li>anyhow, great for applications</li>\n</ul>\n<h2>Borrow Checker</h2>\n<p>There are THREE rules you must have in your head at all times.</p>\n<ul>\n<li>There can only be one value owner</li>\n<li>There can be unlimited immutable borrows (reference) with no mutable references</li>\n<li>There can be only one mutable reference and no immutable references</li>\n</ul>\n<p>There is one rule for Lifetimes</p>\n<ul>\n<li>\n<p>A reference cannot outlive its value</p>\n</li>\n<li>\n<p>tokio</p>\n</li>\n<li>\n<p>leptos + WASM</p>\n</li>\n</ul>","frontmatter":{"date":"March 10, 2023","title":"FEM Rust for Typescript Devs","tags":["workshop","front-end-masters"]}}},"pageContext":{"slug":"/workshops/fem/fem-rust-for-typescript-devs/"}},"staticQueryHashes":["1865044719","3489759178","3649515864"],"slicesMap":{}}