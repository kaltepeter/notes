{"componentChunkName":"component---src-templates-note-template-tsx","path":"/workshops/python-mock-object-library/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://realpython.com/courses/python-mock-object-library/\">https://realpython.com/courses/python-mock-object-library/</a></p>\n<h2>What is Mocking</h2>\n<ul>\n<li>Creating a fake object that represents the real object</li>\n<li>Used in test environments</li>\n<li>More control over code behavior</li>\n<li>Deeper insight into your code\n<ul>\n<li>when functions were called</li>\n<li>how many times they were called</li>\n<li>what arguments were passed</li>\n</ul>\n</li>\n</ul>\n<h2>unittest.mock</h2>\n<ul>\n<li>Built in to Python 3.3+</li>\n<li>Provides the <code>Mock()</code> class</li>\n<li>Provides the <code>patch()</code> method</li>\n</ul>\n<h2>Debugging</h2>\n<ul>\n<li><code>print(dir(json))</code> dump the methods of json</li>\n<li><code>print(json.dumps.call_args)</code> prints args</li>\n<li><code>print(json.dumps.call_count)</code> counts</li>\n<li><code>print(json.dumps.method_calls)</code> all methods called</li>\n<li><code>cal 05 2024</code> in terminal to show the moth 5 of year 2024</li>\n</ul>\n<h2>Lazy Attributes and Methods</h2>\n<p>The mock object will create attributes and methods on demand. Arguments aren't validated by default.</p>\n<pre><code class=\"language-python\">from unittest.mock import Mock\nimport json\n\nmock = Mock()\nprint(mock)\n\ndata = json.dumps({'a': 1})\njson = mock\n\ndata = json.dumps({'a': 1})\nprint(data) # &#x3C;Mock name='mock.dumps()' id='4392722704'>\n</code></pre>\n<pre><code class=\"language-python\">from unittest.mock import Mock\nimport json\n\njson = Mock()\njson.dumps({'a': 1, })\n\nprint(json.dumps.assert_called()) # None, was called\nprint(json.dumps.assert_called_once()) # None\nprint(json.dumps.assert_called_with({'a': 1, })) # none\nprint(json.dumps.assert_called_with({'a': 2, })) # exception\n</code></pre>\n<h2>Return Value</h2>\n<pre><code class=\"language-python\">from datetime import datetime\nfrom unittest.mock import Mock\n\ntuesday = datetime(year=2024, month=5, day=7)\nsaturday = datetime(year=2024, month=5, day=11)\n\ndatetime = Mock()\n\ndef is_weekday():\n     # type: ignore\n    today = datetime.today()\n    day_of_the_week = today.weekday()\n    return (0 &#x3C;= day_of_the_week &#x3C; 5)\n\n\ndatetime.today.return_value = tuesday\nassert is_weekday()\n\ndatetime.today.return_value = saturday\nassert is_weekday() is False\n</code></pre>\n<h2>Unit Tests</h2>\n<p><code>python -m unittest test_example.py</code> run test</p>\n<pre><code class=\"language-python\">if __name__ == '__main__':\n    unittest.main()\n</code></pre>\n<h2>Side Effects</h2>\n<pre><code class=\"language-python\">def get_holidays():\n    r = requests.get('https://localhost/api/holidays');\n    if r.status_code == 200:\n        return r.json()\n\n    return None\n\n\nclass TestGetHolidays(unittest.TestCase):\n    def test_get_holidays_connection(self):\n        requests.get.side_effect = ConnectionError\n        with self.assertRaises(ConnectionError):\n            get_holidays()\n\n    def test_get_holidays_timeout(self):\n        requests.get.side_effect = Timeout\n        with self.assertRaises(Timeout):\n            get_holidays()\n\n    def log_request(self, url):\n        print(f\"Making request to {url}\")\n        response_mock = Mock()\n        response_mock.status_code = 200\n        response_mock.json.return_value = {\n            '25/12': 'Christmas',\n            '01/01': 'New Years'\n        }\n        return response_mock\n\n    def test_request_with_logging(self):\n        requests.get.side_effect = self.log_request\n        assert get_holidays()['25/12'] == 'Christmas'\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n<p>With iterable</p>\n<pre><code class=\"language-python\">def test_request_with_logging(self):\n    requests.get.call_count = 0\n    response_mock = Mock()\n    response_mock.status_code = 200\n    response_mock.json.return_value = {\n        '25/12': 'Christmas',\n        '01/01': 'New Years'\n    }\n\n    requests.get.side_effect = [Timeout, response_mock]\n    with self.assertRaises(Timeout):\n        get_holidays()\n\n    assert get_holidays()['25/12'] == 'Christmas'\n    assert requests.get.call_count == 2\n</code></pre>\n<h2>Configure Mocks</h2>\n<p>Define during construction</p>\n<pre><code class=\"language-python\">mock = Mock(return_value=True, side_effect=AttributeError)\n</code></pre>\n<p>Configure existing</p>\n<pre><code class=\"language-python\">mock.configure_mock(side_effect=None)\n</code></pre>\n<p>Using objects</p>\n<pre><code class=\"language-python\">In [4]: holidays = { '25/12': 'Christmas', '01/01': 'New Years' }\n\nIn [5]: response_mock = Mock(**{'json.return_value': holidays})\n\nIn [6]: response_mock.json()\nOut[6]: {'25/12': 'Christmas', '01/01': 'New Years'}\n</code></pre>\n<h2>patch() as context manager</h2>\n<pre><code class=\"language-python\">from unittest.mock import Mock, patch\nfrom my_calendar import is_weekday, get_holidays\nimport unittest\nfrom requests.exceptions import Timeout\n\nclass TestCalendar(unittest.TestCase):\n    def test_get_holidays_timeout(self):\n        with patch('my_calendar.requests') as mocked_requests:\n            mocked_requests.get.side_effect = Timeout\n            with self.assertRaises(Timeout):\n                get_holidays()\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n<h2>patch.object()</h2>\n<pre><code class=\"language-python\">from unittest.mock import Mock, patch\nfrom my_calendar import is_weekday, get_holidays, requests\nimport unittest\nfrom requests.exceptions import Timeout\n\nclass TestCalendar(unittest.TestCase):\n    def test_get_holidays_timeout(self):\n        with patch.object(requests, 'get', side_effect=Timeout) as _:\n            with self.assertRaises(Timeout):\n                get_holidays()\n\nif __name__ == '__main__':\n    unittest.main()\n\n# or\n\nclass TestCalendar(unittest.TestCase):\n    @patch.object(requests, 'get', side_effect=Timeout)\n    def test_get_holidays_timeout(self, mocked_get):\n\n        with self.assertRaises(Timeout):\n            get_holidays()\n</code></pre>\n<h2>Common Problems</h2>\n<ul>\n<li>Changes to object interfaces</li>\n<li>Changes to external dependencies</li>\n</ul>\n<h2>Spec List</h2>\n<pre><code class=\"language-python\">In [2]: from unittest.mock import Mock\n\nIn [3]: calendar = Mock(spec=['is_weekday', 'get_holidays'])\n\nIn [4]: calendar\nOut[4]: &#x3C;Mock id='4436584656'>\n\nIn [5]: calendar.is_weekday()\nOut[5]: &#x3C;Mock name='mock.is_weekday()' id='4394641168'>\n\nIn [6]: calendar.is_weekdayy()\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[6], line 1\n----> 1 calendar.is_weekdayy()\n\nFile ~/.asdf/installs/python/3.11.7/lib/python3.11/unittest/mock.py:653, in NonCallableMock.__getattr__(self, name)\n    651 elif self._mock_methods is not None:\n    652     if name not in self._mock_methods or name in _all_magics:\n--> 653         raise AttributeError(\"Mock object has no attribute %r\" % name)\n    654 elif _is_magic(name):\n    655     raise AttributeError(name)\n\nAttributeError: Mock object has no attribute 'is_weekdayy'\n</code></pre>\n<h2>Spec Module</h2>\n<pre><code class=\"language-python\">\nIn [9]: import my_calendar\n\nIn [10]: calendar = Mock(spec=my_calendar)\nIn [12]: calendar.is_weekday()\n\nOut[12]: &#x3C;Mock name='mock.is_weekday()' id='4440262544'>\n\nIn [13]: calendar.is_weekdayy()\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[13], line 1\n----> 1 calendar.is_weekdayy()\n\nFile ~/.asdf/installs/python/3.11.7/lib/python3.11/unittest/mock.py:653, in NonCallableMock.__getattr__(self, name)\n    651 elif self._mock_methods is not None:\n    652     if name not in self._mock_methods or name in _all_magics:\n--> 653         raise AttributeError(\"Mock object has no attribute %r\" % name)\n    654 elif _is_magic(name):\n    655     raise AttributeError(name)\n\nAttributeError: Mock object has no attribute 'is_weekdayy'\n</code></pre>\n<h2>Autospec</h2>\n<pre><code class=\"language-python\">In [14]: from unittest.mock import create_autospec\n\nIn [15]: calendar = create_autospec(my_calendar)\n\nIn [16]: calendar\nOut[16]: &#x3C;NonCallableMagicMock spec='module' id='4354278288'>\n\nIn [18]: calendar.is_weekdayy()\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[18], line 1\n----> 1 calendar.is_weekdayy()\n\nFile ~/.asdf/installs/python/3.11.7/lib/python3.11/unittest/mock.py:653, in NonCallableMock.__getattr__(self, name)\n    651 elif self._mock_methods is not None:\n    652     if name not in self._mock_methods or name in _all_magics:\n--> 653         raise AttributeError(\"Mock object has no attribute %r\" % name)\n    654 elif _is_magic(name):\n    655     raise AttributeError(name)\n\nAttributeError: Mock object has no attribute 'is_weekdayy'\n</code></pre>\n<pre><code class=\"language-python\">In [24]: from unittest.mock import patch\n\nIn [25]: with patch('__main__.my_calendar', autospec=True) as calendar:\n    ...:     calendar.is_weekday()\n    ...:     calendar.is_weekdayy()\n    ...:\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[25], line 3\n      1 with patch('__main__.my_calendar', autospec=True) as calendar:\n      2     calendar.is_weekday()\n----> 3     calendar.is_weekdayy()\n\nFile ~/.asdf/installs/python/3.11.7/lib/python3.11/unittest/mock.py:653, in NonCallableMock.__getattr__(self, name)\n    651 elif self._mock_methods is not None:\n    652     if name not in self._mock_methods or name in _all_magics:\n--> 653         raise AttributeError(\"Mock object has no attribute %r\" % name)\n    654 elif _is_magic(name):\n    655     raise AttributeError(name)\n\nAttributeError: Mock object has no attribute 'is_weekdayy'\n</code></pre>","frontmatter":{"date":"May 03, 2024","title":"Improve Your Tests With the Python Mock Object Library","tags":["course","python","real-python"]}}},"pageContext":{"slug":"/workshops/python-mock-object-library/"}},"staticQueryHashes":["1796642556","2356112386","3489759178"],"slicesMap":{}}