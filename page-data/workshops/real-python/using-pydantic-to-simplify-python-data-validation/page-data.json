{"componentChunkName":"component---src-templates-note-template-tsx","path":"/workshops/real-python/using-pydantic-to-simplify-python-data-validation/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://realpython.com/courses/pydantic-simplify-data-validation/\">https://realpython.com/courses/pydantic-simplify-data-validation/</a></p>\n<h2>Basic Model</h2>\n<h3>Valid</h3>\n<pre><code class=\"language-python\">from datetime import date\nfrom enum import Enum\nfrom uuid import UUID, uuid4\nfrom typing_extensions import Self\nfrom typing import Annotated\nimport time\n\nfrom pydantic import (\n    BaseModel,\n    EmailStr,\n    ConfigDict,\n    Field,\n    field_validator,\n    model_validator,\n    PositiveFloat,\n    validate_call,\n    HttpUrl\n)\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Department(Enum):\n    HR = \"HR\"\n    SALES = \"SALES\"\n    IT = \"IT\"\n    ENGINEERING = \"ENGINEERING\"\n\n\nclass Employee(BaseModel):\n    employee_id: UUID = uuid4()\n    name: str\n    email: EmailStr\n    date_of_birth: date\n    salary: float\n    department: Department\n    elected_benefits: bool\n\n\nemployee = Employee(\n    name=\"John Doe\",\n    email=\"john.doe@example.com\",\n    date_of_birth=date(1990, 1, 1),\n    salary=50000,\n    department=Department.HR,\n    elected_benefits=True,\n)\n\nprint(employee)\n</code></pre>\n<h3>Invalid</h3>\n<pre><code class=\"language-python\">broken_employee = Employee(\n    employee_id=\"12345\",\n    name=False,\n    email=\"john.doe@example.com\",\n    date_of_birth=datetime(1990, 1, 1),\n    salary=50000,\n    department=Department.HR,\n    elected_benefits=True,\n)\n</code></pre>\n<h2>From Dictionary</h2>\n<pre><code class=\"language-python\">new_employee_dict = {\n    \"name\": \"Chris Detuma\",\n    \"email\": \"chris.detuma@example.com\",\n    \"date_of_birth\": \"1990-01-01\",\n    \"salary\": 123_000.00,\n    \"department\": \"HR\",\n    \"elected_benefits\": True,\n}\n\n# create a model from a dictionary\nnew_employee = Employee.model_validate(new_employee_dict)\nprint(new_employee)\n</code></pre>\n<h2>From JSON</h2>\n<pre><code class=\"language-python\"># create a model from json\nnew_employee_json = \"\"\"\n    {\n        \"employee_id\": \"d2e7b773-926b-49df-939a-5e98cbb9c9eb\",\n        \"name\": \"Eric Slogrenta\",\n        \"email\": \"eric.slogrenta@example.com\",\n        \"date_of_birth\": \"1990-01-01\",\n        \"salary\": 123000.0,\n        \"department\": \"HR\",\n        \"elected_benefits\": false\n    }\n\"\"\"\n\nnew_employee_from_json = Employee.model_validate_json(new_employee_json)\nprint(new_employee_from_json)\n</code></pre>\n<h2>print dict</h2>\n<pre><code class=\"language-python\">print(new_employee.model_dump())\n</code></pre>\n<h2>print json</h2>\n<pre><code class=\"language-python\">print(new_employee.model_dump_json())\n</code></pre>\n<h2>print schema</h2>\n<pre><code class=\"language-python\">print(Employee.model_json_schema())\n</code></pre>\n<h2>Using Fields</h2>\n<pre><code class=\"language-python\">class Employee(BaseModel):\n    model_config = ConfigDict(populate_by_name=True)\n\n    employee_id: UUID = Field(default_factory=uuid4, frozen=True)\n    name: str = Field(min_length=1, frozen=True)\n    email: EmailStr = Field(pattern=r\".+@example\\.com$\")\n    date_of_birth: date = Field(alias=\"birth_date\",\n                                    repr=False,\n                                    frozen=True)\n    salary: float = Field(alias=\"compensation\", gt=0, repr=False)\n    department: Department\n    elected_benefits: bool\n</code></pre>\n<h3>Invalid</h3>\n<pre><code class=\"language-python\">incorrect_employee_data = {\n    \"name\": \"\",\n    \"email\": \"john.doe@example\",\n    \"birth_date\": \"1990-01-01\",\n    \"salary\": -50000,\n    \"department\": \"HR\",\n    \"elected_benefits\": True,\n}\n\nprint(Employee.model_validate(incorrect_employee_data))\n</code></pre>\n<h3>Valid</h3>\n<pre><code class=\"language-python\">correct_employee_data = {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"birth_date\": \"1990-01-01\",\n    \"salary\": 50000,\n    \"department\": \"HR\",\n    \"elected_benefits\": True,\n}\n\nprint(Employee.model_validate(correct_employee_data))\n</code></pre>\n<h2>Validators</h2>\n<pre><code class=\"language-python\">class Employee(BaseModel):\n    model_config = ConfigDict(populate_by_name=True)\n\n    employee_id: UUID = Field(default_factory=uuid4, frozen=True)\n    name: str = Field(min_length=1, frozen=True)\n    email: EmailStr = Field(pattern=r\".+@example\\.com$\")\n    date_of_birth: date = Field(alias=\"birth_date\",\n                                    repr=False,\n                                    frozen=True)\n    salary: float = Field(alias=\"compensation\", gt=0, repr=False)\n    department: Department\n    elected_benefits: bool\n\n    @field_validator(\"date_of_birth\")\n    @classmethod\n    def check_valid_age(cls, date_of_birth: date) -> date:\n        today = date.today()\n        eighteen_years_ago = date(today.year - 18, today.month, today.day)\n\n        if date_of_birth > eighteen_years_ago:\n            raise ValueError(\"Employee must be at least 18 years old.\")\n        \n        return date_of_birth\n    \n    @model_validator(mode=\"after\")\n    def check_it_benefits(self) -> Self:\n        department = self.department\n        elected_benefits = self.elected_benefits\n\n        if department == Department.IT and elected_benefits:\n            raise ValueError(\"IT employees do not qualify for elected benefits.\")\n        \n        return self\n</code></pre>\n<h3>Invalid</h3>\n<pre><code class=\"language-python\">incorrect_employee_data = {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"birth_date\": \"2021-01-01\",\n    \"salary\": 50000,\n    \"department\": \"HR\",\n    \"elected_benefits\": True,\n}\n\nprint(Employee.model_validate(incorrect_employee_data))\n\nincorrect_employee_data = {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"birth_date\": \"2001-01-01\",\n    \"salary\": 50000,\n    \"department\": \"IT\",\n    \"elected_benefits\": True,\n}\n\nprint(Employee.model_validate(incorrect_employee_data))\n</code></pre>\n<h2>Validate Functions</h2>\n<pre><code class=\"language-python\">@validate_call\ndef send_invoice(\n    client_name: Annotated[str, Field(min_length=1)],\n    client_email: EmailStr,\n    items_purchased: list[str],\n    amount_owed: PositiveFloat,\n) -> str:\n    email_str = f\"\"\"\n    Dear {client_name}, \\n\n    Thank you for choosing xyz inc! You\n    owe ${amount_owed:,.2f} for the following items: \\n\n    {items_purchased}\n\"\"\"\n    print(f\"Sending email to {client_email}...\")\n    time.sleep(2)\n\n    return email_str\n</code></pre>\n<h3>Invalid</h3>\n<pre><code class=\"language-python\">email_str = send_invoice(\n    client_name=\"\",\n    client_email=\"john.doe@example.\",\n    items_purchased=[\"item1\", \"item2\"],\n    amount_owed=100.00,\n)\n</code></pre>\n<h3>Valid</h3>\n<pre><code class=\"language-python\">email_str = send_invoice(\n    client_name=\"John Doe\",\n    client_email=\"john.doe@example.com\",\n    items_purchased=[\"item1\", \"item2\"],\n    amount_owed=100.00,\n)\n\nprint(email_str)\n</code></pre>\n<h2>Annotated</h2>\n<ul>\n<li>Used to provide metadata about a function argument</li>\n<li>Recommended by Pydantic for validation of argument with metadata</li>\n<li>if <code>default_factory</code> is used for dcefault argument\n<ul>\n<li>assign the argument directly to a field instance</li>\n</ul>\n</li>\n</ul>\n<h2>Pydantic Settings</h2>\n<h3>Set in shell</h3>\n<pre><code class=\"language-bash\">export DATABASE_HOST=\"https://dbprovider.example.com\"\nexport DATABASE_USER=\"username\"\nexport DATABASE_PASSWORD=\"fakePas87824r3\"\nexport API_KEY=\"1234567890-dksjfmkj#$@#$kjfsk\"\n</code></pre>\n<h3>Load settings</h3>\n<pre><code class=\"language-python\">class AppConfig(BaseSettings):\n    database_host: HttpUrl\n    database_user: str = Field(min_length=5)\n    database_password: str = Field(min_length=10)\n    api_key: str = Field(min_length=20)\n\nprint(AppConfig())\n</code></pre>\n<h2>BaseSettings</h2>\n<ul>\n<li>parse and validate any env vars</li>\n<li>any <code>BaseModel</code> validation is possible with BaseSettings\n<ul>\n<li>custom validation:\n<ul>\n<li><code>model_validator</code></li>\n<li><code>field_validator</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>SettingsConfigDict</h2>\n<ul>\n<li>customization of behavior is possible</li>\n<li>Example:\n<ul>\n<li>read from a <code>.env</code> file</li>\n<li>Ensuring <code>BaseSettings</code> is Case-Sensitive</li>\n<li>No additional variables present.</li>\n</ul>\n</li>\n</ul>\n<h3><code>.env</code> file</h3>\n<pre><code>database_host=\"https://dbprovider.example.com\"\ndatabase_user=\"username\"\ndatabase_password=\"fakePas87824r3\"\napi_key=\"1234567890-dksjfmkj#$@#$kjfsk\"\n</code></pre>\n<h3>Load settings from <code>.env</code> file</h3>\n<pre><code class=\"language-python\">class AppConfig(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        case_sensitive=True,\n        extra=\"forbid\",\n    )\n    database_host: HttpUrl\n    database_user: str = Field(min_length=5)\n    database_password: str = Field(min_length=10)\n    api_key: str = Field(min_length=20)\n\n\nprint(AppConfig())\n</code></pre>","frontmatter":{"date":"May 16, 2025","title":"Using Pydantic to Simplify Python Data Validation","tags":["course","real-python","pydantic","python"]}}},"pageContext":{"slug":"/workshops/real-python/using-pydantic-to-simplify-python-data-validation/"}},"staticQueryHashes":["1796642556","2356112386","3489759178"],"slicesMap":{}}