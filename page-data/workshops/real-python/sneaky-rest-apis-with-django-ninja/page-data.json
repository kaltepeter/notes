{"componentChunkName":"component---src-templates-note-template-tsx","path":"/workshops/real-python/sneaky-rest-apis-with-django-ninja/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://realpython.com/videos/sneaky-rest-apis-with-django-ninja-overview/\">https://realpython.com/videos/sneaky-rest-apis-with-django-ninja-overview/</a></p>\n<p>grandpa: <a href=\"https://www.django-rest-framework.org/\">https://www.django-rest-framework.org/</a> is different from ninja</p>\n<h2>Overview</h2>\n<ul>\n<li>Django Ninja is a FastAPI inspired library for writing REST APIs with Django</li>\n<li>Decorate a Django view with HTTP operations</li>\n<li>Ninja does serialization and forms the response</li>\n<li>Manages authentication and exception handling</li>\n<li>Flexible about the organizational structure of your API</li>\n</ul>\n<h2>Setup</h2>\n<pre><code class=\"language-bash\">python -m venv venv\nsource venv/bin/activate  \npython -m pip install django django-ninja\n\ncd Westeros\n./mange.py startapp lannister\nsource venv/bin/activate  \n</code></pre>\n<h2>Lannister API</h2>\n<ul>\n<li>where doesn't matter</li>\n<li>apis.py is similar to views.py</li>\n</ul>\n<pre><code class=\"language-python\"># lannister/api.py\nfrom ninja import Router\n\nrouter = Router()\n\n@router.get(\"/home\")\ndef home(request):\n    return \"A Lannister always pays their debts\"\n\n# westeros/urls.py\nfrom django.contrib import admin\nfrom django.urls import path\n\nfrom ninja import NinjaAPI\n\nfrom lannister.api import router as lannister_router\nfrom dothraki.api import router as dothraki_router\n\napi = NinjaAPI()\napi.add_router(\"/lannister/\", lannister_router)\napi.add_router(\"/dothraki/\", dothraki_router)\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"api/\", api.urls),\n]\n</code></pre>\n<h2>Ninja</h2>\n<ul>\n<li>Doesn't use trailing slashes</li>\n<li>Might conflict with Django's trailing slash</li>\n</ul>\n<h3>Arguments</h3>\n<ul>\n<li>Ninja handles Django-style URL structures and query parameters</li>\n<li>Everything HTTP is a string</li>\n<li>Ninja uses this type information to convert your variables</li>\n<li>Strings don't need conversion but it's a good practice</li>\n<li>Notation similar to Django in the url</li>\n</ul>\n<pre><code class=\"language-python\">@router.get(\"/ruler\")\ndef ruler(request, gender):\n    if gender == 'm':\n        return \"Hello Khal\"\n    \n    return \"Hello Khalessi\"\n\n@router.get(\"/horses\")\ndef horses(request, num: int):\n    horses = [\"horse\" for _ in range(num)]\n    return \"\\n\".join(horses)\n\n@router.get(\"/food/{item}\")\ndef food(request, item: str):\n    return f\"I love {item}\"\n\n@router.get(\"/drank/{int:count}\")\ndef drank(request, count: int):\n    return f\"I drank {count} cups of fermented horse milk\"\n</code></pre>\n<h3>Response Object</h3>\n<ul>\n<li>access the response object to make changes</li>\n<li>example: setting a header or cookie</li>\n</ul>\n<pre><code class=\"language-python\">@router.get(\"/swords\")\ndef swords(request, response: HttpResponse):\n    response.set_cookie(\"curve\", \"bendy\")\n    return f\"Swords are pointy\"\n</code></pre>\n<h3>Schemas</h3>\n<ul>\n<li>Ninja is built on top of pydantic</li>\n<li>pydantic uses a model object to group fields\n<ul>\n<li>django also has a Model object</li>\n<li>pydantic model objects become Schema objects in Ninja</li>\n</ul>\n</li>\n<li>groups attributes defined with type information</li>\n<li>APIs respond with data:\n<ul>\n<li>Schema used to translate it into a payload</li>\n</ul>\n</li>\n<li>Ninja doesn't care where, <code>schemas.py</code> might make sense for large apps</li>\n<li><code>out</code> and <code>in</code> is the Ninja convention for serializing in or out</li>\n<li><code>ModelSchema</code> works like a Django form class</li>\n<li>Ninja automatically looks for static methods with <code>resolve_</code> and uses to populate a field</li>\n</ul>\n<pre><code class=\"language-python\"># targaryen/schemas.py\nfrom ninja import Schema, ModelSchema\nfrom targaryen.models import Person\n\n\nclass DragonOut(Schema):\n    name: str\n    birth_year: int\n\n\nclass PersonOut(ModelSchema):\n    full_name: str\n\n    class Config:\n        model = Person\n        model_fields = [\"id\", \"birth_year\"]\n\n        @staticmethod\n        def resolve_full_name(obj):\n            return f\"{obj.name}, {obj.title}\"\n\n\n# targaryen/api.py\n@router.get(\"/dragons\", response=list[DragonOut])\ndef dragons(request):\n    data = [\n        DragonOut(name=\"Drogon\", birth_year=298),\n        DragonOut(name=\"Rhaegal\", birth_year=298),\n        DragonOut(name=\"Viserion\", birth_year=298),\n    ]\n\n    return data\n\n\n@router.get(\"/person/{person_id}\", response=PersonOut)\ndef dragons(request, person_id: int):\n    return Person.objects.get(id=person_id)\n</code></pre>\n<h3>Outside of Views</h3>\n<p><code>./manage.py loaddata targaryen/fixtures/targaryen.json</code> load data from fixtures</p>\n<pre><code class=\"language-python\">from targaryen.models import Person\nfrom targaryen.schemas import PersonOut\nperson = Person.objects.last()\ndata = PersonOut.from_orm(person)\ndata.dict()\ndata.json()\n</code></pre>\n<h3>CRUD</h3>\n<p>Be careful with <code>__all__</code> or <code>__exclude__</code>, you will get all fields and changes without thinking about it and this is not recommended.</p>\n<ul>\n<li>specify response type</li>\n<li>use url_name for reverse lookup, can be finicky\n<ul>\n<li>a second get request with url_name would override the previous name</li>\n<li>name the first operation with url_name and not the rest</li>\n</ul>\n</li>\n<li>payload has GiftIn type</li>\n<li><code>**</code> creates dict with keywrod arguments</li>\n</ul>\n<pre><code class=\"language-python\"># stark/schemas.py\nfrom ninja import ModelSchema\nfrom stark.models import WeddingGift\n\n\nclass GiftIn(ModelSchema):\n    class Config:\n        model = WeddingGift\n        model_exclude = [\"id\",]\n\n\nclass GiftOut(ModelSchema):\n    class Config:\n        model = WeddingGift\n        model_fields = \"__all__\"\n\n# stark/api.py\nfrom django.shortcuts import get_object_or_404 \nfrom ninja import Router\nfrom stark.schemas import GiftIn, GiftOut\nfrom stark.models import WeddingGift\n\nrouter = Router()\n\n@router.post(\"/gift\", response=GiftOut, url_name=\"create_gift\")\ndef create_gift(request, payload: GiftIn):\n    gift = WeddingGift.objects.create(**payload.dict())\n    return gift\n\n\n@router.get(\"/gifts\", response=list[GiftOut], url_name=\"list_gifts\")\ndef list_gifts(request):\n    return WeddingGift.objects.all()\n\n\n@router.get(\"/gift/{int:gift_id}\", response=GiftOut, url_name=\"gift\")\ndef get_gift(request, gift_id):\n    return get_object_or_404(WeddingGift, id=gift_id)\n\n\n@router.put(\"/gift/{int:gift_id}\", response=GiftOut)\ndef update_gift(request, gift_id, payload: GiftIn):\n    gift = get_object_or_404(WeddingGift, id=gift_id)\n\n    for name, value in payload.dict().items():\n        setattr(gift, name, value)\n\n    gift.save()\n    return gift\n\n\n@router.delete(\"/gift/{int:gift_id}\")\ndef delete_gift(request, gift_id):\n    gift = get_object_or_404(WeddingGift, id=gift_id)\n    gift.delete()\n    return {\"success\": True}\n</code></pre>\n<h3>Ninja Docs</h3>\n<p><a href=\"http://localhost:8000/api/docs\">http://localhost:8000/api/docs</a></p>\n<h3>Complex Organization</h3>\n<p>multiple operations</p>\n<ul>\n<li>a view can handle multiple http operations</li>\n<li>use the api_operation decorator, passing a list of acceptable operations</li>\n<li>can be used for HTTP operations without decorators\n<ul>\n<li>Example: HEAD, OPTIONS</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-python\">@router.api_operation([\"GET\", \"POST\", \"DELETE\"], \"/ravens\")\ndef ravens(request):\n    if request.method == \"DELETE\":\n        # process\n        \n    return \"squawk\"\n</code></pre>\n<p>flock of ninjas</p>\n<ul>\n<li>can create multiple NinjaAPI objects</li>\n<li>useful for API versioning</li>\n<li>can create routers for each if desired</li>\n<li>naming prefix uses the version number</li>\n</ul>\n<pre><code class=\"language-python\">from ninja import NinjaAPI\n\napi1 = NinjaAPI(version=\"1.0\")\napi2 = NinjaAPI(version=\"2.0\")\n\nurlpatterns = [\n    path(\"api/v1\", api1.urls),\n    path(\"api/v2\", api2.urls),\n]\n</code></pre>\n<p>routerless</p>\n<pre><code class=\"language-python\">from ninja import NinjaAPI\n\napi = NinjaAPI()\n\n@api.get(\"/giants\")\ndef giants(request):\n    return \"very tall\"\n\n\nfrom django.urls import reverse\n\nreverse(\"api-1.0.0:create_gifts\")\nreverse(\"api-2.0:giants\")\n</code></pre>\n<p>nested routers</p>\n<pre><code class=\"language-python\">from ninja import NinjaAPI\n\napi = NinjaAPI()\n\ngreyjoy_routers = Router()\nkraken_routers = Router()\n\n@kraken_routers.get(\"/tenacles\")\ndef tentacles(request):\n    return \"Squiggly\"\n\napi.add_router(\"/greyjoy/\", greyjoy_routers)\n\ngreyjoy_routers.add_router(\"/squids/\", kraken_routers)\n</code></pre>\n<h3>Authentication</h3>\n<ul>\n<li>ninja supports multiple types of authentication\n<ul>\n<li>use Django's auth system</li>\n<li>API Keys</li>\n<li>HTTP Basic Auth</li>\n<li>HTTP Bearer</li>\n</ul>\n</li>\n<li>Support multiple authentication methods: first pass allows access</li>\n<li>specify authentication at the veiw, route, or API level</li>\n</ul>\n<p>CSRF</p>\n<ul>\n<li>Django uses a token to prevent CSRF attacks</li>\n<li>included in forms when handling POSTS</li>\n<li>Ninja can enforce this as well</li>\n</ul>\n<pre><code class=\"language-python\">api = NinjaAPI(csrf=True)\n</code></pre>\n<pre><code class=\"language-python\"># nwatch/api.py\nfrom ninja import NinjaAPI\nfrom ninja.security import APIKeyHeader, django_auth\n\nsecure = NinjaAPI(version=\"match\", csrf=True)\n\n@secure.get('/elevator', auth=django_auth)\ndef elevator(request):\n    return \"Ascend to the wall\"\n\n# Westeros/urls.py\nfrom nwatch.api import secure\n\napi = NinjaAPI()\n\nurlpatterns = [\n    path(\"secure/\", secure.urls),\n]\n</code></pre>\n<p><a href=\"http://localhost:8000/secure/docs\">http://localhost:8000/secure/docs</a> will load swagger, no slash</p>\n<p>Django auth isn't the best way to secure an API, more common way is api key. Django auth is used if already using Django and adding an API for a separate frotnend</p>\n<pre><code class=\"language-python\"># nwatch/api.py\nfrom ninja import NinjaAPI\nfrom ninja.security import APIKeyHeader, django_auth\n\nsecure = NinjaAPI(version=\"match\", csrf=True)\n\nclass APIKey(APIKeyHeader):\n    param_name = \"X-API-KEY\"\n\n    def authenticate(self, request, key):\n        if key == 'jonsnow':\n            return key\n        \napi_key = APIKey()\n\n@secure.get('/downbelow', auth=api_key)\ndef downbelow(request):\n    return \"One blast for rangers returning\"\n</code></pre>\n<blockquote>\n<p>[!NOTE]\nFor testing the header must be set as 'HTTP_X_API_KEY' or it will not work and be tricky to debug</p>\n</blockquote>\n<ul>\n<li>ninja.security\n<ul>\n<li>APIKeyQuery</li>\n<li>APIKeyCookie</li>\n<li>HTTPBearer</li>\n<li>HTTPBasicAuth</li>\n</ul>\n</li>\n<li>write own function</li>\n<li>What to use?\n<ul>\n<li>APIKeyHeader</li>\n</ul>\n</li>\n</ul>\n<p>Resources</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Authentication\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Authentication</a></li>\n<li><a href=\"https://realpython.com/python-requests/\">https://realpython.com/python-requests/</a></li>\n<li><a href=\"https://realpython.com/django-user-management/\">https://realpython.com/django-user-management/</a></li>\n<li><a href=\"https://realpython.com/courses/python-requests/\">https://realpython.com/courses/python-requests/</a></li>\n</ul>\n<h3>Error Handling</h3>\n<ul>\n<li>\n<p>Good:</p>\n<ul>\n<li>ninja gives info</li>\n</ul>\n</li>\n<li>\n<p>Bad:</p>\n<ul>\n<li>it might not be where you expect</li>\n<li>lots of things happen in the decorator before your view</li>\n</ul>\n</li>\n<li>\n<p>Ninja provides built-in exception handling for standard Django errors</p>\n</li>\n<li>\n<p>Raise an error using HTTPError</p>\n</li>\n<li>\n<p>Wirte your own exception handlers</p>\n</li>\n<li>\n<p>Override Ninja's handlers</p>\n</li>\n</ul>\n<pre><code class=\"language-python\">from django.http import Http404, HttpResponse\nfrom ninja import NinjaAPI\nfrom ninja.errors import HttpError\n\ncitadel = NinjaAPI(version=\"citadel\")\n\n@citadel.get('/conclave')\ndef conclave(request):\n    raise HttpError(503, \"Service unavailable. Please come back later.\")\n    return \"Never get here\"\n\n# custom handler\nclass BookUnavailable(Exception):\n    pass\n\n@citadel.exception_handler(BookUnavailable)\ndef book_unavailable(request, exc):\n    data = {\n        \"message\": \"Book not available\",\n    }\n\n    return citadel.create_response(request, data, status=404)\n\n@citadel.get('/book/{book_id}')\ndef fetch_book(request, book_id: int):\n    raise BookUnavailable()\n    return \"Never got here either\"\n \n# override django\n@citadel.exception_handler(Http404)\ndef override404(request, exc):\n    return HttpResponse(\"I banish you to the wall\", status=404)\n\n@citadel.get(\"/greyscale\")\ndef greyscale(request):\n    raise Http404()\n</code></pre>\n<h2>Curl</h2>\n<pre><code class=\"language-bash\">curl http://localhost:8000/api/lannister/home                                                     \n\"A Lannister always pays their debts\"%                                                                  \n\n╭─ 🚴    …/django-ninja/Westeros  \n╰─ curl -v http://localhost:8000/api/lannister/home                                                  \n* Host localhost:8000 was resolved.\n* IPv6: ::1\n* IPv4: 127.0.0.1\n*   Trying [::1]:8000...\n* connect to ::1 port 8000 from ::1 port 55554 failed: Connection refused\n*   Trying 127.0.0.1:8000...\n* Connected to localhost (127.0.0.1) port 8000\n> GET /api/lannister/home HTTP/1.1\n> Host: localhost:8000\n> User-Agent: curl/8.7.1\n> Accept: */*\n> \n* Request completely sent off\n&#x3C; HTTP/1.1 200 OK\n&#x3C; Date: Mon, 19 May 2025 17:24:30 GMT\n&#x3C; Server: WSGIServer/0.2 CPython/3.12.9\n&#x3C; Content-Type: application/json; charset=utf-8\n&#x3C; X-Frame-Options: DENY\n&#x3C; Content-Length: 37\n&#x3C; X-Content-Type-Options: nosniff\n&#x3C; Referrer-Policy: same-origin\n&#x3C; Cross-Origin-Opener-Policy: same-origin\n&#x3C; \n* Connection #0 to host localhost left intact\n\"A Lannister always pays their debts\"%  \n</code></pre>\n<ul>\n<li><code>></code> curl is sending</li>\n<li><code>&#x3C;</code> server is responding</li>\n</ul>\n<p>Wrap url in quotes to avoid shell issues</p>\n<pre><code class=\"language-bash\">curl -s \"http://localhost:8000/api/dothraki/ruler?gender=f\" \n</code></pre>\n<pre><code class=\"language-bash\"> curl -s http://localhost:8000/api/dothraki/ruler | python -m json.tool\n    \"detail\": [\n        {\n            \"type\": \"missing\",\n            \"loc\": [\n                \"query\",\n                \"gender\"\n            ],\n            \"msg\": \"Field required\"\n        }\n    ]\n}\n</code></pre>\n<p><code>python -m json.tool</code> pretty prints json</p>\n<pre><code class=\"language-bash\">curl -s \"http://localhost:8000/api/targaryen/dragons\" | python -m json.tool\n[\n    {\n        \"name\": \"Drogon\",\n        \"birth_year\": 298\n    },\n    {\n        \"name\": \"Rhaegal\",\n        \"birth_year\": 298\n    },\n    {\n        \"name\": \"Viserion\",\n        \"birth_year\": 298\n    }\n]\n\ncurl -s -X POST http://localhost:8000/api/stark/gift -H \"Content-Type: application/json\" -d '{\"description\": \"stain remover\" }'\n\ncurl -s -X PUT http://localhost:8000/api/stark/gift/4 -H \"Content-Type: application/json\" -d '{\"description\": \"stain removers\" }'\n\ncurl -s -X DELETE http://localhost:8000/api/stark/gift/1   \n\ncurl -s -H 'X-API-KEY:jonsnow'  http://localhost:8000/secure/downbelow  \n</code></pre>\n<h2>Reverse Lookup</h2>\n<pre><code class=\"language-python\">>>> from django.urls import reverse\n>>> reverse('api-1.0.0:create_gift')\n'/api/stark/gift'\n>>> reverse('api-1.0.0:list_gifts')\n'/api/stark/gifts'\n>>> reverse('api-1.0.0:gift', args=[1,])\n'/api/stark/gift/1'\n</code></pre>","frontmatter":{"date":"May 19, 2025","title":"Sneaky REST APIs With Django Ninja","tags":["course","real-python","python","project","django"]}}},"pageContext":{"slug":"/workshops/real-python/sneaky-rest-apis-with-django-ninja/"}},"staticQueryHashes":["1796642556","2356112386","3489759178"],"slicesMap":{}}