{"componentChunkName":"component---src-templates-note-template-tsx","path":"/rspec/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://www.rubypigeon.com/posts/rspec-core-cheat-sheet/\">https://www.rubypigeon.com/posts/rspec-core-cheat-sheet/</a></p>\n<h2>let, let!</h2>\n<p><a href=\"https://mixandgo.com/learn/ruby/let-vs-let!\">https://mixandgo.com/learn/ruby/let-vs-let!</a></p>\n<ul>\n<li>Both memoize the value</li>\n<li>They are lazyily instantiated, only executed when called.</li>\n<li>Use <code>let!</code> if needing to evaluate before the it blocks.</li>\n</ul>\n<h2>Request specs</h2>\n<p><a href=\"https://dev.to/kevinluo201/introduce-rspec-request-spec-4pbl\">https://dev.to/kevinluo201/introduce-rspec-request-spec-4pbl</a>\n<a href=\"https://github.com/rspec/rspec-rails/blob/master/features/request_specs/request_spec.feature\">https://github.com/rspec/rspec-rails/blob/master/features/request_specs/request_spec.feature</a></p>\n<pre><code class=\"language-ruby\">RSpec.describe \"/some/path\", type: :request do\n  # spec content\nend\n</code></pre>\n<h2>Authentication</h2>\n<p><a href=\"https://thoughtbot.com/blog/token-authentication-with-rails\">https://thoughtbot.com/blog/token-authentication-with-rails</a></p>\n<pre><code class=\"language-ruby\"># support/request_helpers.rb\nmodule RequestHelpers\n  def get_token(user = nil)\n    user ||= FactoryBot.create(:user_confirmed)\n    token = Knock::AuthToken.new(payload: { sub: user.id }).token\n    \"Bearer #{token}\"\n  end\nend\n\n# spec/controllers/api/v2/follows_controller_spec.rb\nlet(:email) { 'example101@example.com' }\nlet!(:user) { create(:user_confirmed, { user_email: email }) }\nlet!(:company) { create(:company) }\n\nlet(:valid_headers) { { 'authorization': get_token(user) } }\n\ncontext 'GET' do\n  it 'should return a single follow' do\n    get api_v2_follows_url, {\n        headers: valid_headers,\n        params: {\n        resource_type: 'Company',\n        resource_id: follow_companies[1]\n        }\n    }\n    expect(response).to be_successful\n    data = JSON.parse(response.body)\n    expect(data.size).to be 1\n    expect(data.first['resource_id']).to eq follow_companies[1]\n  end\nend\n</code></pre>\n<h2>Skipping tests</h2>\n<p><code>xit</code>, <code>xcontext</code> x in front will skip the blockl</p>\n<p><code>skip</code> instead of it will skip</p>\n<p>Omit the body</p>\n<h2>Changes</h2>\n<p>Assert changes</p>\n<pre><code class=\"language-ruby\">expect {\n    my_method\n}.to change(users, :count).by(3)\n</code></pre>\n<p>The number can be negative for delete.</p>","frontmatter":{"date":"June 18, 2023","title":"Rspec","tags":["framework","ruby","backend"]}}},"pageContext":{"slug":"/rspec/"}},"staticQueryHashes":["1796642556","2356112386","3489759178"],"slicesMap":{}}