{"componentChunkName":"component---src-templates-note-template-tsx","path":"/react/","result":{"data":{"markdownRemark":{"html":"<h2>monorepo</h2>\n<p><a href=\"https://itnext.io/guide-react-app-monorepo-with-lerna-d932afb2e875\">https://itnext.io/guide-react-app-monorepo-with-lerna-d932afb2e875</a></p>\n<h2>create react app</h2>\n<pre><code class=\"language-bash\">create-react-app my-app --typescript\n</code></pre>\n<h2>with lerna</h2>\n<pre><code class=\"language-bash\">lerna add @types/jest\nlerna add @types/node\nlerna add @types/react\nlerna add @types/react-dom\nlerna add react\nlerna add react-dom\nlerna add react-scripts\nlerna add typescript\nlerna add tslint\n</code></pre>\n<h2>Performance</h2>\n<h3>Context</h3>\n<blockquote>\n<p>The way that context works is that whenever the provided value changes from one render to another, it triggers a re-render of all the consuming components (which will re-render whether or not they're memoized).</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/kentcdodds/old-kentcdodds.com/blob/319db97260078ea4c263e75166f05e2cea21ccd1/content/blog/how-to-optimize-your-context-value/index.md\">How to Optimize your Context Value</a></li>\n</ul>\n<p>When:</p>\n<ul>\n<li>Your context value changes frequently</li>\n<li>Your context has many consumers</li>\n<li>You are bothering to use React.memo (because things are legit slow)</li>\n<li>You've actually measured things and you know it's slow and needs to be optimized</li>\n</ul>\n<p>Tips:</p>\n<ul>\n<li>Slice context up when possible</li>\n<li>Use memo within context if needed</li>\n</ul>\n<h3>Large App State</h3>\n<ul>\n<li><a href=\"https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster\">State Colocation will make your React app faster</a></li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/kentcdodds-com/image/upload/f_auto,q_auto,dpr_2.0,w_1600/v1625033349/kentcdodds.com/content/blog/state-colocation-will-make-your-react-app-faster/where-to-put-state.png\" alt=\"State Decision Tree\"></p>\n<ul>\n<li>\n<p>Use HOC to handle memoization</p>\n</li>\n<li>\n<p><a href=\"https://recoiljs.org/docs/basic-tutorial/intro\">Recoil</a></p>\n</li>\n</ul>\n<h3>Performance Monitoring</h3>\n<ul>\n<li><a href=\"https://kentcdodds.com/blog/react-production-performance-monitoring\">React Production Performance</a></li>\n</ul>\n<h2>Async (Suspense)</h2>\n<ul>\n<li>React renders components in try/catch, if you throw a promise during render if it's not ready it will update when ready</li>\n</ul>\n<pre><code class=\"language-typescript\">const pokemonPromise = fetchPokemon(\"pikachu\").then(\n  (pokemonData) => (pokemon = pokemonData),\n);\n\nfunction PokemonInfo() {\n  if (!pokemon) {\n    throw pokemonPromise;\n  }\n\n  return (\n    &#x3C;div>\n      &#x3C;div className=\"pokemon-info__img-wrapper\">\n        &#x3C;img src={pokemon.image} alt={pokemon.name} />\n      &#x3C;/div>\n      &#x3C;PokemonDataView pokemon={pokemon} />\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<h3>Error Handling</h3>\n<pre><code class=\"language-typescript\">if (pokemonError) {\n  throw pokemonError;\n}\n\n&#x3C;ErrorBoundary>\n  &#x3C;React.Suspense fallback={&#x3C;div>loading...&#x3C;/div>}>Yo&#x3C;/React.Suspense>\n&#x3C;/ErrorBoundary>;\n</code></pre>\n<h3>Promises inside render</h3>\n<ul>\n<li>Dangerous, don't assume render called only once</li>\n<li>Use a cache to resolve</li>\n</ul>\n<pre><code class=\"language-typescript\">const promiseCache = {};\nfunction MySuspendingComponent({ value }) {\n  let resource = promiseCache[value];\n  if (!resource) {\n    resource = doAsyncThing(value);\n    promiseCache[value] = resource; // &#x3C;-- this is very important\n  }\n  return &#x3C;div>{resource.read()}&#x3C;/div>;\n}\n</code></pre>\n<p>✅ ⚠️ ⛔</p>\n<h3>Fetch on Render (default)</h3>\n<p>✅ benefits from colocation\n✅ fetch when component renders\n⛔ User may see empty content\n⛔ Takes time</p>\n<h3>Fetch than render</h3>\n<p>⛔ empty content</p>\n<h3>Render as fetch</h3>\n<p>✅ Fetch data and assets as soon as you have the assets you need (preload)\n⚠️ Lose the benefits of colocation unless split into two files (data and component)</p>\n<h3>Suspense List</h3>\n<ul>\n<li><a href=\"https://17.reactjs.org/docs/concurrent-mode-reference.html#suspenselist\">Suspense List</a></li>\n</ul>","frontmatter":{"date":"January 07, 2019","title":"React","tags":["framework","ui"]}}},"pageContext":{"slug":"/react/"}},"staticQueryHashes":["1796642556","2356112386","3489759178"],"slicesMap":{}}