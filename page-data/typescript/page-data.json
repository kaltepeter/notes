{
    "componentChunkName": "component---src-templates-note-template-tsx",
    "path": "/typescript/",
    "result": {"data":{"markdownRemark":{"html":"<p>dynamic imports:</p>\n<ul>\n<li><a href=\"https://mariusschulz.com/blog/typescript-2-4-dynamic-import-expressions\">https://mariusschulz.com/blog/typescript-2-4-dynamic-import-expressions</a></li>\n<li><a href=\"http://2ality.com/2017/01/import-operator.html\">http://2ality.com/2017/01/import-operator.html</a></li>\n</ul>\n<h2>async</h2>\n<p>async IIFE</p>\n<pre><code class=\"language-typescript\">(async () => {\n    // code goes here\n})();\n</code></pre>\n<h2>global definition</h2>\n<pre><code class=\"language-typescript\">declare namespace NodeJS {\n  interface Global {\n    APPD_ENABLED: string;\n  }\n}\n</code></pre>\n<h2>Boolean as type guard filter</h2>\n<ul>\n<li><a href=\"https://fettblog.eu/boolean-in-javascript-and-typescript/\">https://fettblog.eu/boolean-in-javascript-and-typescript/</a></li>\n<li><a href=\"https://mariusschulz.com/blog/conditional-types-in-typescript\">https://mariusschulz.com/blog/conditional-types-in-typescript</a></li>\n</ul>\n<pre><code class=\"language-javascript\">let list = [1,2,3,4,null,7,null,9,'yo'];\nlet filteredList = list.filter(Boolean).filter(v => typeof v === 'number');\nconsole.log(filteredList);\n</code></pre>\n<p>Does not work, type error.</p>\n<pre><code class=\"language-typescript\">let list = [1,2,3,4,null,7,null,9, 'yo'];\nlet filteredList: NonNullable&#x3C;number>[];\nfilteredList = list.filter(Boolean);\nconsole.log(filteredList);\n</code></pre>\n<p>Works with strict null checks.</p>\n<pre><code class=\"language-typescript\">let list = [1,2,3,4,null,7,null,9, 'yo'];\nlet filteredList: NonNullable&#x3C;number>[];\n// filteredList = list.filter&#x3C;NonNullable&#x3C;number>>(Boolean as any); // would remove nulls but allow strings\nfilteredList = list.filter&#x3C;NonNullable&#x3C;number>>(Boolean as any).filter(v => typeof v === 'number');\nconsole.log(filteredList);\n</code></pre>\n<h2>BigInt</h2>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2019/07/essential-guide-javascript-newest-data-type-bigint/\">https://www.smashingmagazine.com/2019/07/essential-guide-javascript-newest-data-type-bigint/</a></li>\n</ul>\n<pre><code class=\"language-typescript\">\n  describe.each([\n    [30, 1073741824, '000001000000000000000000000000000000'],\n    [31, 2147483648, '000010000000000000000000000000000000'],\n    [32, 4294967296, '000100000000000000000000000000000000'],\n    [33, 8589934592, '001000000000000000000000000000000000'],\n    [34, 17179869184, '010000000000000000000000000000000000'],\n    [35, 34359738368, '100000000000000000000000000000000000'],\n    // [36, 68719476736, '1000000000000000000000000000000000000'],\n  ])(\n    `JS large number math`,\n    (pos: number, expectedResult: number, expectedBinaryString: string) => {\n      test(`should return ${expectedResult}`, () => {\n        // expect(1 &#x3C;&#x3C; pos).toEqual(expectedResult); // after pos 30 next bit is negative and starts at 1\n        expect(Math.pow(2, pos)).toEqual(expectedResult);\n      });\n\n      test(`convertToBinaryString(${expectedResult})`, () => {\n        expect(expectedBinaryString.length).toBe(36);\n        expect(convertToBinaryString(BigInt(expectedResult))).toBe(\n          expectedBinaryString\n        );\n      });\n\n      test(`parseInt`, () => {\n        expect(parseInt(expectedBinaryString, 2)).toBe(expectedResult);\n      });\n    }\n  );\n</code></pre>\n<h2>Binary &#x26; Bitwise</h2>\n<ul>\n<li><a href=\"https://medium.com/@LindaVivah/learn-how-to-read-binary-in-5-minutes-dac1feb991e\">https://medium.com/@LindaVivah/learn-how-to-read-binary-in-5-minutes-dac1feb991e</a></li>\n<li><a href=\"https://lucasfcosta.com/2018/12/25/bitwise-operations.html\">https://lucasfcosta.com/2018/12/25/bitwise-operations.html</a></li>\n<li><a href=\"https://blog.logrocket.com/interesting-use-cases-for-javascript-bitwise-operators/\">https://blog.logrocket.com/interesting-use-cases-for-javascript-bitwise-operators/</a></li>\n<li><a href=\"https://codeforwin.org/2018/05/10-cool-bitwise-operator-hacks-and-tricks.html\">https://codeforwin.org/2018/05/10-cool-bitwise-operator-hacks-and-tricks.html</a></li>\n<li><a href=\"https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/\">https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/</a></li>\n<li><a href=\"https://graphics.stanford.edu/~seander/bithacks.html\">https://graphics.stanford.edu/~seander/bithacks.html</a></li>\n</ul>\n<p>Create a zero padded binary number.</p>\n<pre><code class=\"language-typescript\">const convertToBinaryString = (num: bigint) =>\n  num.toString(2).padStart(36, '0');\nconst num = 51331021;\nconsole.log(convertToBinaryString(BigInt(num))) // 000000000011000011110011111111001101\n</code></pre>\n<p>Convert a binary string to number.</p>\n<pre><code class=\"language-typescript\">console.log(parseInt(\"000000000011000011110011111111001101\",2)) // 51331021\n</code></pre>\n<p>Set a bit for 32 bit signed int.</p>\n<pre><code class=\"language-typescript\">1 &#x3C;&#x3C; 4 // 16 or 000000000000000000000000000000010000\n</code></pre>\n<p>Get a bit at a location</p>\n<pre><code class=\"language-typescript\">const getBit = (n: number, bitIndex:number) => {\n    const bitMask = 1 &#x3C;&#x3C; bitIndex;\n    const result = n &#x26; bitMask;\n    return result >>> bitIndex;\n}\n\n\nconsole.log(getBit(n,3)) // 0\nconsole.log(getBit(n,4)) // 1\nconsole.log(getBit(n, 5)) // 1\nconsole.log(getBit(n, 6)) // 0\n</code></pre>\n<p>Turn on a bit</p>\n<pre><code class=\"language-typescript\">const setBit = (n: number, bitIndex: number) => {\n    const bitMask = 1 &#x3C;&#x3C; bitIndex;\n    return n | bitMask;\n}\n\nconsole.log(0b10110001.toString(2)) // 10110001\nconsole.log(setBit(0b10110001,2).toString(2)) // 10110101\n</code></pre>\n<p>Clear a bit</p>\n<pre><code class=\"language-typescript\">const clearBit = (n:number, bitIndex:number) => {\n    const bitMask = ~(1 &#x3C;&#x3C; bitIndex);\n    return n &#x26; bitMask;\n}\n\nconsole.log(n.toString(2)) // 10110101\nconsole.log(clearBit(n,2).toString(2)) // 10110001\n\n</code></pre>\n<p>Bitwise find in array</p>\n<pre><code class=\"language-typescript\">const foundIndex = (index: number) => {\n  return Boolean(~index);\n}\n\nconsole.log(foundIndex(arr.indexOf(9))); // false\nconsole.log(foundIndex(arr.indexOf(100))); // false\nconsole.log(foundIndex(arr.indexOf(3))); // true\n</code></pre>\n<p>Flags</p>\n<pre><code class=\"language-ts\">let val = 0b0;\n\nenum Flags {\n  NONE = 0,\n  SELF = 1,\n  NEIGHBOR1 = 2,\n  NEIGHBOR2 = 4,\n  NEIGHBOR3 = 8,\n  NEIGHBOR4 = 16,\n  NEIGHBOR5 = 32,\n  NEIGHBOR6 = 64,\n  NEIGHBOR7 = 128,\n  NEIGHBOR8 = 256,\n  OTHERDATA = 512\n}\n\nconst currentFlags = {\n  self: 1,\n  neighbor1: 0,\n  neighbor2: 1,\n  neighbor3: 1,\n  neighbor4: 0,\n  neighbor5: 1,\n  neighbor6: 0,\n  neighbor7: 0,\n  neighbor8: 1,\n  otherdata: 1\n}\n\nconst getNeighborsMask = 0b0111111110;\n\t\nconst isEmpty = (v: number) => !(v > Flags.NONE);\n\nconsole.log(`Initial value:  ${val} : `, val.toString(2), isEmpty(val));\nconsole.log('');\n\nconsole.log(`***** SETTING *****`);\n// Setting\nObject.entries(currentFlags).forEach(([_,v], i) => {\n  val |= v &#x3C;&#x3C; i\n});\nconsole.log(`  Final value: ${val} : `, val.toString(2), isEmpty(val));\n\nconsole.log('');\nconsole.log(`***** READING *****`);\n// Reading\nconsole.log(`self is : ${val &#x26; Flags.SELF}`);\nconsole.log(`neighbor1 is : ${val &#x26; Flags.NEIGHBOR1}`);\nconsole.log(`neighbor2 is : ${val &#x26; Flags.NEIGHBOR2}`);\nconsole.log(`neighbor3 is : ${val &#x26; Flags.NEIGHBOR3}`);\nconsole.log(`neighbor4 is : ${val &#x26; Flags.NEIGHBOR4}`);\nconsole.log(`neighbor5 is : ${val &#x26; Flags.NEIGHBOR5}`);\nconsole.log(`otherData is : ${val &#x26; Flags.OTHERDATA}`);\n\nconsole.log('');\nconsole.log(`     -----     `);\nObject.keys(currentFlags).forEach((k, i) => {\n  const key: string = k.toUpperCase();\n  const flag: number = Flags[key];\n  if (val &#x26; flag) {\n    // console.log(`${i} bit is set.`)\n    console.log(`${k} is set.`)\n  } else {\n        console.log(`${k} is not set.`)\n  }\n});\n\nconsole.log('');\nconsole.log(`     -----     `);\nconst cn = val &#x26; getNeighborsMask;\n// console.log(`isAnyNeighborSet: `, val > Flags.SELF); // only if no other data type is after neighbors\nconsole.log(`isAnyNeighborSet mask: `, !isEmpty(cn));\n\nconsole.log('');\nconsole.log(`***** UNSET *****`);\n\n// unset neighbors only\nObject.keys(currentFlags).forEach((k, i) => {\n    const key: string = k.toUpperCase();\n  const flag: number = Flags[key];\n  if (flag > Flags.SELF &#x26;&#x26; flag &#x3C; Flags.OTHERDATA) {\n    val &#x26;= (~(1 &#x3C;&#x3C; i));\n  }\n})\nconsole.log(`self is : ${val &#x26; Flags.SELF}`);\nconsole.log(`neighbor1 is : ${val &#x26; Flags.NEIGHBOR1}`);\nconsole.log(`neighbor2 is : ${val &#x26; Flags.NEIGHBOR2}`);\nconsole.log(`neighbor3 is : ${val &#x26; Flags.NEIGHBOR3}`);\nconsole.log(`neighbor4 is : ${val &#x26; Flags.NEIGHBOR4}`);\nconsole.log(`neighbor5 is : ${val &#x26; Flags.NEIGHBOR5}`);\nconsole.log(`otherData is : ${val &#x26; Flags.OTHERDATA}`);\n\nconst cn2 = val &#x26; getNeighborsMask;\n// console.log(`isAnyNeighborSet: `, val > Flags.SELF); // only if no other data type is after neighbors\nconsole.log(`isAnyNeighborSet mask: `, !isEmpty(cn2));\n</code></pre>\n<details><summary><b>Output</b></summary>\n<pre><code class=\"language-ts\">\"use strict\";\nlet val = 0b0;\nvar Flags;\n(function (Flags) {\n    Flags[Flags[\"NONE\"] = 0] = \"NONE\";\n    Flags[Flags[\"SELF\"] = 1] = \"SELF\";\n    Flags[Flags[\"NEIGHBOR1\"] = 2] = \"NEIGHBOR1\";\n    Flags[Flags[\"NEIGHBOR2\"] = 4] = \"NEIGHBOR2\";\n    Flags[Flags[\"NEIGHBOR3\"] = 8] = \"NEIGHBOR3\";\n    Flags[Flags[\"NEIGHBOR4\"] = 16] = \"NEIGHBOR4\";\n    Flags[Flags[\"NEIGHBOR5\"] = 32] = \"NEIGHBOR5\";\n    Flags[Flags[\"NEIGHBOR6\"] = 64] = \"NEIGHBOR6\";\n    Flags[Flags[\"NEIGHBOR7\"] = 128] = \"NEIGHBOR7\";\n    Flags[Flags[\"NEIGHBOR8\"] = 256] = \"NEIGHBOR8\";\n    Flags[Flags[\"OTHERDATA\"] = 512] = \"OTHERDATA\";\n})(Flags || (Flags = {}));\nconst currentFlags = {\n    self: 1,\n    neighbor1: 0,\n    neighbor2: 1,\n    neighbor3: 1,\n    neighbor4: 0,\n    neighbor5: 1,\n    neighbor6: 0,\n    neighbor7: 0,\n    neighbor8: 1,\n    otherdata: 1\n};\nconst getNeighborsMask = 0b0111111110;\nconst isEmpty = (v) => !(v > Flags.NONE);\nconsole.log(`Initial value:  ${val} : `, val.toString(2), isEmpty(val));\nconsole.log('');\nconsole.log(`***** SETTING *****`);\n// Setting\nObject.entries(currentFlags).forEach(([_, v], i) => {\n    val |= v &#x3C;&#x3C; i;\n});\nconsole.log(`  Final value: ${val} : `, val.toString(2), isEmpty(val));\nconsole.log('');\nconsole.log(`***** READING *****`);\n// Reading\nconsole.log(`self is : ${val &#x26; Flags.SELF}`);\nconsole.log(`neighbor1 is : ${val &#x26; Flags.NEIGHBOR1}`);\nconsole.log(`neighbor2 is : ${val &#x26; Flags.NEIGHBOR2}`);\nconsole.log(`neighbor3 is : ${val &#x26; Flags.NEIGHBOR3}`);\nconsole.log(`neighbor4 is : ${val &#x26; Flags.NEIGHBOR4}`);\nconsole.log(`neighbor5 is : ${val &#x26; Flags.NEIGHBOR5}`);\nconsole.log(`otherData is : ${val &#x26; Flags.OTHERDATA}`);\nconsole.log('');\nconsole.log(`     -----     `);\nObject.keys(currentFlags).forEach((k, i) => {\n    const key = k.toUpperCase();\n    const flag = Flags[key];\n    if (val &#x26; flag) {\n        // console.log(`${i} bit is set.`)\n        console.log(`${k} is set.`);\n    }\n    else {\n        console.log(`${k} is not set.`);\n    }\n});\nconsole.log('');\nconsole.log(`     -----     `);\nconst cn = val &#x26; getNeighborsMask;\n// console.log(`isAnyNeighborSet: `, val > Flags.SELF); // only if no other data type is after neighbors\nconsole.log(`isAnyNeighborSet mask: `, !isEmpty(cn));\nconsole.log('');\nconsole.log(`***** UNSET *****`);\n// unset neighbors only\nObject.keys(currentFlags).forEach((k, i) => {\n    const key = k.toUpperCase();\n    const flag = Flags[key];\n    if (flag > Flags.SELF &#x26;&#x26; flag &#x3C; Flags.OTHERDATA) {\n        val &#x26;= (~(1 &#x3C;&#x3C; i));\n    }\n});\nconsole.log(`self is : ${val &#x26; Flags.SELF}`);\nconsole.log(`neighbor1 is : ${val &#x26; Flags.NEIGHBOR1}`);\nconsole.log(`neighbor2 is : ${val &#x26; Flags.NEIGHBOR2}`);\nconsole.log(`neighbor3 is : ${val &#x26; Flags.NEIGHBOR3}`);\nconsole.log(`neighbor4 is : ${val &#x26; Flags.NEIGHBOR4}`);\nconsole.log(`neighbor5 is : ${val &#x26; Flags.NEIGHBOR5}`);\nconsole.log(`otherData is : ${val &#x26; Flags.OTHERDATA}`);\nconst cn2 = val &#x26; getNeighborsMask;\n// console.log(`isAnyNeighborSet: `, val > Flags.SELF); // only if no other data type is after neighbors\nconsole.log(`isAnyNeighborSet mask: `, !isEmpty(cn2));\n\n</code></pre>\n</details>\n<details><summary><b>Compiler Options</b></summary>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictPropertyInitialization\": true,\n    \"strictBindCallApply\": true,\n    \"noImplicitThis\": true,\n    \"noImplicitReturns\": true,\n    \"alwaysStrict\": true,\n    \"esModuleInterop\": true,\n    \"declaration\": true,\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"moduleResolution\": 2,\n    \"target\": \"ES2017\",\n    \"jsx\": \"React\",\n    \"module\": \"ESNext\"\n  }\n}\n</code></pre>\n</details>\n<p><strong>Playground Link:</strong> <a href=\"https://www.typescriptlang.org/play?#code/DYUwLgBAbghsEF4IAYBGyDcAoLIB2ArgLYQBiwMA5gM4QDeWEEAcgPLMCiiKANIxAGUOAGVLcAjHyacAkgHEAEgCFWAJXHcATFJYd5ytZu4AWHbMUrVAZm4AOM3otrjEgGwP9lgKzcr2-uYGqq7crqYBjkEA7BKa9hGearZaXu78rAAqChyqACIAghn53F7imlgAvjgAxgD2eNSQ1QQATi34YORUtEgMTNQgwABmAFwQkvx4IACWlAAWqLUt4mPIOlOzC0uaYxNMG-OLLVa76zOHS8arZ5tHXqeT51strtePt0tRb-tPR7YPTFqYDmIBaABMYGAYLtKjV6o0IJRwMxfktqABZGDUADW3DQyHEhKJhMwWAAkFg6g1INNqBwiAAHMAAT24AAooGNCERUKCAJSIAB8EAAhByIMKujQAHRsTh87CU+G1UDS4C1ShsgAGMjw0zA0zg0DgBBAYwgABI6LBgBUIGMtTxjcBpWBagIwC1pnhNZo+U7afSmcyOXA+QqlQ0VSA1Rq2QByeMRyPUaOxzVagBU2ezgg4GQyMmYcggOezWojAHpK4JwAafVhWKgAFYgapgaUdL0gahs5ptDpS6h86VDJYcGDVOZstkAbQA+jwoABdAMChDCvrOiAAHyQUAgAB5DxBppUI1TU6r1RmmKRvUabaaxlabXaHU6ba73Z7vb7-aedKMiyobAOGiqXmmN4Jkm2CQdecZZmWECqBw+S5EWJZlpmFbYNWKEgDAYJ-imUGIQMwyAfalrWkaABkZAUDKQiiBUuGkQhGYHM8Gi0tRr70Yx3SypEljiGxF7Kpx2rcUcRh8S+tHwAxQ4iYkqiaBJcFSTG0FarJSw2ApNE2hAKlMdQalONYWkcbpiEGS0LjGQJylCTKgSWMYtnwfZXGoi0PguUpZnuZZnlqF4Pk6em2pAiCLS5JCMBUYppnmcJmTZHkhT5LZdmxYmklRtJWpMOVAC0VVVeVTDsU2rbttK2IgMyvb9u0eCdBZI5ji0E5TjO2JrkK9D8JekAtcyYyNF6PrcNi34AKoMgyoIAMJYiAbIRkwE0QEMTFcsQvItNwQ6zlNy7YEw0xDBAoGhYdVACluTD4b5sVala0x2qg+pUQMHYVvwe0xXpVrYnafFA9KINMHagwDGNtW1Z9EN0FDVF4ECECw-DEBVBUybo3GRXaSVfnaqj1U1bV7H7dUeDcOliLIgFGJYtieE1qTGa0vkeDMiiHwtAI4AftukoWdKLGkAqED4fUwCsndEA4xA8WghAEJQhALJrVRMBDGA2uOdQBV6QLQsixcYvgBARBc5LIqBsBIZM+BcKU4VsGW4h2EQEtzBCBkpZluxWD4QQDQO+bmt4CrjYtm2HZTe1rSdd13S9eOk7Tmyw2nuum6gxA+1TTNv7zUgi1uita0tJtAw7Td5fwpAz2UMdPLa0gF1XW3atsl3EphbLIhiHRDGjyeqlZTkBRFK9ZfpUgbIAH5shox7F7thPnv7GYUfdwWs6pcvRT7emObxtBpYJqkReoV9XlT+kBfJ98mY-MvP5pDNwYOQCkZb+rlQpP1EmoKwr8yL+VFs5MBIUMoeSgaobygDr7ANFkFJB58-5oKipgt+X0taJWSqlH+bl55ZEXrlfKjM8BGH3IJJEYBbbPE5jiHm7csH82oILYWAVxZgElqZaWwk5YKyVonVW90NZkJ1hQg2IAjYmzNhzI+2prZCNFiIx2zsICOlFG7YMfYmHgSAA\">Provided</a></p>\n<p>Easier to Read Binary Enums</p>\n<pre><code class=\"language-typescript\">enum Flags {\n  NONE = 0,\n  SELF = 1 &#x3C;&#x3C; 0,\n  NEIGHBOR1 = 1 &#x3C;&#x3C; 1,\n  NEIGHBOR2 = 1 &#x3C;&#x3C; 2,\n  NEIGHBOR3 = 1 &#x3C;&#x3C; 3,\n  NEIGHBOR4 = 1 &#x3C;&#x3C; 4,\n}\n\n// or, they are equivalent\n\nenum Flags2 {\n  NONE = 0,\n  SELF = 1,\n  NEIGHBOR1 = 2 ** 1,\n  NEIGHBOR2 = 2 ** 2,\n  NEIGHBOR3 = 2 ** 3,\n  NEIGHBOR4 = 2 ** 4,\n}\n\n// original\nenum Flags {\n  NONE = 0,\n  SELF = 1,\n  NEIGHBOR1 = 2,\n  NEIGHBOR2 = 4,\n  NEIGHBOR3 = 8,\n  NEIGHBOR4 = 16,\n}\n</code></pre>\n<h2>Data Structures</h2>\n<ul>\n<li><a href=\"https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b\">https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b</a></li>\n</ul>\n<p>Map can be very fast.</p>\n<h3>Set</h3>\n<ul>\n<li>No duplicates</li>\n<li>Converting from array to set and vice versa is easy</li>\n<li>Large datasets can have a performance impact, usually very fast</li>\n<li>Values follow object equality rules</li>\n</ul>\n<pre><code class=\"language-typescript\">type point = [number,number,number];\nconst testSet = new Set&#x3C;point>();\nconst newPoint = [4,3,2] as point;\nconst points: point[] = [[0,1,1], [1,1,2], [3,1,1], [0,2,1], newPoint];\npoints.forEach((p) => {\n    testSet.add(p);\n})\n\nconsole.log(testSet.size); // 5\nconsole.log(testSet.has([1,1,2])); // object equality, false\nconsole.log(testSet.has(newPoint)); // true\n</code></pre>\n<p>workaround for complex lookups</p>\n<pre><code class=\"language-typescript\">type point = [number,number,number];\nconst testSet = new Set&#x3C;string>();\nconst newPoint = [4,3,2] as point;\nconst points: point[] = [[0,1,1], [1,1,2], [3,1,1], [0,2,1], newPoint];\npoints.forEach((p) => {\n    testSet.add(p.toString());\n})\n\nconsole.log(testSet.size); // 5\nconsole.log(testSet.has([1,1,2].toString())); // true\nconsole.log(testSet.has(newPoint.toString())); // true\n</code></pre>","frontmatter":{"date":"January 14, 2021","title":"typescript","tags":["language"]}}},"pageContext":{"slug":"/typescript/"}},
    "staticQueryHashes": ["1929983096","3649515864"]}