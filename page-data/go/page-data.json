{
    "componentChunkName": "component---src-templates-note-template-tsx",
    "path": "/go/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Error Handling</h2>\n<ul>\n<li>If returning error, use pointers for value. makes returning nil possible and easier to handle. If value you would have to construct and empty Foo.</li>\n</ul>\n<pre><code class=\"language-go\">func CreateFoo(fail bool) (*Foo, error) {\n\tif fail {\n\t\treturn nil, fmt.Errorf(\"this is an error with value \")\n\t}\n\treturn &#x26;Foo{}, nil\n}\n\nfunc main() {\n\tfoo, err := CreateFoo(false)\n}\n</code></pre>\n<h2>File Handling</h2>\n<ul>\n<li><a href=\"https://blog.carlmjohnson.net/post/2021/how-to-use-go-embed/\">embed</a></li>\n</ul>\n<h2>Values vs Pointer receiver</h2>\n<ul>\n<li>default to pointer unless you know you need a value</li>\n<li>value receivers receive a copy, pointers don't.</li>\n<li>value receivers may have perf wins</li>\n</ul>\n<pre><code class=\"language-go\">type Foo struct {\n    thing int\n}\n\n// value receiver\nfunc (f Foo) fA() {\n    ...\n    f.thing = 5; // DOESNT DO ANYTHING\n}\n\n// pointer receiver\nfunc (f *Foo) fB() {\n    ...\n    f.thing = 5; // CHANGES\n}\n</code></pre>\n<h2>Structs</h2>\n<pre><code class=\"language-go\">type GoLangStruct struct {\n    y int\n    x int\n}\n\nfunc NewStruct(x, y int) GoLangStruct {\n    return GoLangStruct{x, y} // x will equal y, it goes by order not name\n}\n\nfunc main() {\n    fmt.Printf(\"%+v\\n\", NewStruct(9, 6));\n}\n</code></pre>","frontmatter":{"date":"March 11, 2023","title":"go","tags":["language"]}}},"pageContext":{"slug":"/go/"}},
    "staticQueryHashes": ["1929983096","3649515864"]}