{
    "componentChunkName": "component---src-templates-note-template-tsx",
    "path": "/nix/",
    "result": {"data":{"markdownRemark":{"html":"<h2>file permissions (chmod)</h2>\n<p><a href=\"https://www.tutorialspoint.com/unix/unix-file-permission.htm\">https://www.tutorialspoint.com/unix/unix-file-permission.htm</a></p>\n<table>\n<thead>\n<tr>\n<th>num</th>\n<th>permission</th>\n<th>Ref</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>No permission</td>\n<td>---</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Execute permission</td>\n<td>--x</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Write permission</td>\n<td>-w-</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Read permission</td>\n<td>r--</td>\n</tr>\n</tbody>\n</table>\n<p>The rest is math. e.g. 6 is:</p>\n<blockquote>\n<p>Read and write permission: 4 (read) + 2 (write) = 6</p>\n</blockquote>\n<p>It's binary.</p>\n<p>--- represents 3 positions of a binary number, max 7.</p>\n<p>There are three groups of these. Representing : user - group - everyone else</p>\n<p>Max permission is: 777. rwx for all three groups.</p>\n<h2>commands</h2>\n<h3>vmstat</h3>\n<pre><code class=\"language-text\">vmstat\nvmstat -S M # show in MB\nfree -m ; sync # show free mem and write current\nsudo bash -c \"echo 3 > /proc/sys/vm/drop_caches\" # clean cache\nfree -m # show memory\nvmstat 5 3 # run 3 times every 5 sec\n</code></pre>\n<p>list vm stats. memory, disk, etc</p>\n<h3>who</h3>\n<pre><code class=\"language-text\">who\nwho -l # who is logged in and process\nwho -T # is messaging turned on\nmesg # send message to user\n</code></pre>\n<h3>netstat</h3>\n<pre><code class=\"language-text\">netstat -alt # list tcp/udp active ports\nnetstat -alx # list all tcp/udp/sockets\nnetstat -i # list interfaces\nnetstat -s #\n</code></pre>\n<h3>top</h3>\n<pre><code class=\"language-text\">top\n</code></pre>\n<h3>ps</h3>\n<pre><code class=\"language-text\">ps # list process\nps all # list all process\n</code></pre>\n<h3>pstree</h3>\n<pre><code class=\"language-text\">pstree #show systemd tree\n</code></pre>\n<h3>lsof</h3>\n<pre><code class=\"language-text\">lsof -i # list network\n</code></pre>\n<h3>iptables</h3>\n<pre><code class=\"language-text\">sudo iptables -nvL # show data in/out\n</code></pre>\n<h3>watch</h3>\n<pre><code class=\"language-text\">watch -d sudo iptables -nvL # show every 2 sec and highlight changes\n</code></pre>\n<h3>systat</h3>\n<pre><code class=\"language-text\">apt-get install sysstat\nsudo vi /etc/default/sysstat # turn it on with boolean\ncat /etc/cron.d/sysstat # list cron jobs\n\nsar # command to review sysstat\nsar -q 1 3 # display load avg 3 times 1 sec int\nsar -q -f /var/log/sysstat/sa15 # ubuntu read day 15\n\nsar -w # context switch per sec\nsar -n DEv # network interface stats\nsar -b # overall activity\nsar -q -s 10:00:00 -e 11:00:00 # between times for today\n</code></pre>\n<h4>parallel execution</h4>\n<p><a href=\"https://www.gnu.org/software/parallel/\">https://www.gnu.org/software/parallel/</a></p>\n<h3>ssh keys</h3>\n<p>General things. SSH keys identify and provide access. I am not a fan of sharing keys for the identifying access. It's not hard to automate keys and use a separate key per user. I also tend to want a separate key per machine, to split permissions and access, say work separate from home.</p>\n<h4>Generating Secure Keys</h4>\n<p><strong>Which algorithm?</strong></p>\n<p><a href=\"https://goteleport.com/blog/comparing-ssh-keys/\">https://goteleport.com/blog/comparing-ssh-keys/</a></p>\n<blockquote>\n<p>The short answer to this is: as long as the key strength is good enough for the foreseeable future, it doesn't really matter. Because here we are considering a signature for authentication within an SSH session. The cryptographic strength of the signature just needs to withstand the current, state-of-the-art attacks.</p>\n</blockquote>\n<p>-- <a href=\"https://blog.peterruppel.de/ed25519-for-ssh/\">https://blog.peterruppel.de/ed25519-for-ssh/</a></p>\n<p>While GitHub used to recommend RSA, they now recommend 'ed25519' in their guide. They have one of the best guides and most common use of SSH so I prefer to keep aligned with that.</p>\n<p><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>\n<p><a href=\"https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Public_Key_Authentication#Downloading_keys\">https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Public_Key_Authentication#Downloading_keys</a></p>\n<h4>get sshkey fingerprints</h4>\n<p><a href=\"https://stackoverflow.com/questions/9607295/how-do-i-find-my-rsa-key-fingerprint\">https://stackoverflow.com/questions/9607295/how-do-i-find-my-rsa-key-fingerprint</a></p>\n<pre><code class=\"language-bash\">ssh-keygen -E md5 -lf ~/.ssh/id_dsa.pub\n</code></pre>\n<h4>saving passphrase for ssh</h4>\n<p><a href=\"https://www.linux.com/tutorials/manage-ssh-key-file-passphrase/\">https://www.linux.com/tutorials/manage-ssh-key-file-passphrase/</a></p>\n<pre><code class=\"language-bash\"># Specify your passphrase here\nexport YOUR_PASSPHRASE=\"XXX\"\n\n# Load protected key without prompt\necho \"echo $YOUR_PASSPHRASE\" > /tmp/mypass\nchmod 700 /tmp/mypass\ncat id_rsa| SSH_ASKPASS=/tmp/mypass ssh-add -\n\n# Verify loaded certificate\nssh-add -l\n</code></pre>\n<h3>tail process</h3>\n<p><a href=\"https://unix.stackexchange.com/questions/58550/how-to-view-the-output-of-a-running-process-in-another-bash-session\">https://unix.stackexchange.com/questions/58550/how-to-view-the-output-of-a-running-process-in-another-bash-session</a></p>\n<pre><code class=\"language-bash\">tail -f /proc/&#x3C;pid>/fd/1\n</code></pre>\n<h2>security</h2>\n<h3>fail to ban</h3>\n<p><a href=\"https://www.techrepublic.com/article/how-to-install-fail2ban-on-ubuntu-server-18-04/\">https://www.techrepublic.com/article/how-to-install-fail2ban-on-ubuntu-server-18-04/</a></p>\n<pre><code class=\"language-bash\">sudo apt update\nsudo apt upgrade\nsudo apt install fail2ban\n\nsudo systemctl start fail2ban\nsudo systemctl enable fail2ban\n\nsudo vi /etc/fail2ban/jail.local\n</code></pre>\n<p>paste in config: (jail.local)</p>\n<pre><code>[sshd]\nenabled = true\nport = 22\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\n</code></pre>\n<pre><code class=\"language-bash\">sudo systemctl restart fail2ban\n</code></pre>\n<p>to un-ban:</p>\n<pre><code class=\"language-bash\">sudo fail2ban-client set sshd unbanip IP_ADDRESS\n38.142.92.122\n</code></pre>\n<h3>chechking invalid auth</h3>\n<pre><code class=\"language-bash\">sudo grep -io 'Invalid user \\(.*\\) \\([0-9\\.]\\)' /var/log/auth.log | sed 's/[Ii]nvalid user //' > invalid_auth.log\n</code></pre>\n<h2>port scanning</h2>\n<pre><code class=\"language-bash\">nmap (-sV)\n</code></pre>\n<h2>list standard ports</h2>\n<pre><code class=\"language-bash\">sudo less /etc/services\n</code></pre>\n<h2>firewall</h2>\n<p>ufw - uncomplicated firewall</p>\n<pre><code class=\"language-bash\">sudo ufw status\nsudo ufw allow ssh\nsudo ufw enable\n</code></pre>","frontmatter":{"date":"October 09, 2019","title":"\\*nix","tags":["nix"]}}},"pageContext":{"slug":"/nix/"}},
    "staticQueryHashes": ["1929983096","3649515864"]}