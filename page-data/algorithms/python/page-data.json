{
    "componentChunkName": "component---src-templates-note-template-tsx",
    "path": "/algorithms/python/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Cartesian Product, Permutations</h2>\n<p><a href=\"https://www.geeksforgeeks.org/python-construct-cartesian-product-tuple-list/\">https://www.geeksforgeeks.org/python-construct-cartesian-product-tuple-list/</a></p>\n<p>example: get all permutations of coords x,y,z for {0,1,2} +- 1</p>\n<pre><code class=\"language-python\">res = [(x, y, z) for x in range(-1,1) for y in range(0,2) for z in range(1,3)] \nprint(res)\n</code></pre>\n<h2>Umeyama algorithm</h2>\n<p><a href=\"https://zpl.fi/aligning-point-patterns-with-kabsch-umeyama-algorithm/\">https://zpl.fi/aligning-point-patterns-with-kabsch-umeyama-algorithm/</a></p>\n<pre><code class=\"language-python\">def kabsch_umeyama(A, B):\n    assert A.shape == B.shape\n    n, m = A.shape\n\n    EA = np.mean(A, axis=0)\n    EB = np.mean(B, axis=0)\n    VarA = np.mean(np.linalg.norm(A - EA, axis=1) ** 2)\n\n    H = ((A - EA).T @ (B - EB)) / n\n    U, D, VT = np.linalg.svd(H)\n    d = np.sign(np.linalg.det(U) * np.linalg.det(VT))\n    S = np.diag([1] * (m - 1) + [d])\n\n    R = U @ S @ VT\n    c = VarA / np.trace(np.diag(D) @ S)\n    t = EA - c * R @ EB\n\n    return R, c, t\n\nA = np.array([[ 23, 178],\n              [ 66, 173],\n              [ 88, 187],\n              [119, 202],\n              [122, 229],\n              [170, 232],\n              [179, 199]])\nB = np.array([[232, 38],\n              [208, 32],\n              [181, 31],\n              [155, 45],\n              [142, 33],\n              [121, 59],\n              [139, 69]])\n\nR, c, t = kabsch_umeyama(A, B)\n# R = [[-0.81034281,  0.58595608]\n#      [-0.58595608, -0.81034281]]\n# c = 1.46166131\n# t = [271.3345951, 396.07800317]\n\nB = np.array([t + c * R @ b for b in B])\n# B = [[ 29.08878779, 152.36814188]\n#      [ 52.37669337, 180.03008629]\n#      [ 83.50028582, 204.33920503]\n#      [126.28647155, 210.02515345]\n#      [131.40664707, 235.37261559]\n#      [178.54823113, 222.56285654]\n#      [165.79288328, 195.30194121]]\n</code></pre>\n<p><a href=\"https://colab.research.google.com/drive/1QmLL-0_FofDoJgtbCVlGdSZUxZA-K6ho?usp=sharing\">Colab preview</a></p>\n<h2>Linear Algebra, Machine Learning</h2>\n<h3>NumPy</h3>\n<p><a href=\"https://numpy.org/doc/stable/user/absolute_beginners.html\">https://numpy.org/doc/stable/user/absolute_beginners.html</a> - getting started</p>\n<p><a href=\"https://www.educba.com/matrix-multiplication-in-numpy/\">https://www.educba.com/matrix-multiplication-in-numpy/</a> - detailed explanations of functions</p>\n<p><a href=\"https://www.tutorialexample.com/understand-numpy-np-multiply-np-dot-and-operation-a-beginner-guide-numpy-tutorial/\">https://www.tutorialexample.com/understand-numpy-np-multiply-np-dot-and-operation-a-beginner-guide-numpy-tutorial/</a> - explains diff between dot, multiply and *</p>","frontmatter":{"date":"April 11, 2021","title":"Python","tags":null}}},"pageContext":{"slug":"/algorithms/python/"}},
    "staticQueryHashes": ["1929983096","3649515864"]}