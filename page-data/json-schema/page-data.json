{"componentChunkName":"component---src-templates-note-template-tsx","path":"/json-schema/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://json-schema.org/understanding-json-schema/index.html\">https://json-schema.org/understanding-json-schema/index.html</a></p>\n<p>Used by angular builders: <a href=\"https://github.com/angular/angular/blob/master/aio/content/guide/cli-builder.md#angular-cli-builders\">https://github.com/angular/angular/blob/master/aio/content/guide/cli-builder.md#angular-cli-builders</a></p>\n<h2>Tools</h2>\n<p><a href=\"https://github.com/bcherny/json-schema-to-typescript\">https://github.com/bcherny/json-schema-to-typescript</a> - json2ts server, browser or online tool</p>\n<p><a href=\"https://bcherny.github.io/json-schema-to-typescript-browser/\">https://bcherny.github.io/json-schema-to-typescript-browser/</a> - json2ts in browser</p>\n<h2>Workflow</h2>\n<p>Use <code>json2ts</code> to test partials or fully supported schemas.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\">{\n  \"$schema\": \"http://json-schema.org/schema\",\n  \"type\": \"object\",\n  \"title\": \"SvgToTsBuilder\",\n  \"description\": \"The svg-icons-builder is a Angular builder for the svg-to-ts project. It can be used to convert SVG icons inside an Angular library or SPA to an object, to constants or even to individual TypeScript or JavaScript files\",\n\"allOf\": [\n    {\"$ref\": \"#/definitions/baseOptions\"},\n  {\"properties\": {\n    \"conversionType\": {\n      \"type\": \"string\",\n      \"description\": \"Converting your icons to a single object, converting your icons to constants or converting your icons to single files.\",\n      \"default\": \"constants\",\n      \"enum\": [\"object\", \"constants\", \"files\"]\n    },\n   \"srcFiles\": {\n      \"type\": \"array\",\n      \"description\": \"Input files matching the given filename pattern.\",\n      \"items\": [\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"default\": \"['*.svg']\"\n    },\n    \"outputDirectory\": {\n      \"type\": \"string\",\n      \"description\": \"Name of the output directory.\",\n      \"default\": \"\\\"./dist\\\"\"\n    },\n    \"svgoConfig\": {\n      \"type\": \"object\",\n      \"description\": \"A path to your svgoConfiguration JSON file or an inline configuration object.\"\n    },\n    \"delimiter\": {\n      \"type\": \"string\",\n      \"description\": \"Delimiter which is used to generate the types and name properties.\",\n      \"default\": \"SNAKE\",\n      \"enum\": [\"CAMEL\", \"KEBAB\", \"SNAKE\", \"UPPER\"]\n    },\n     \"generateCompleteIconSet\": {\n                \"type\": \"boolean\",\n                \"description\": \"TODO: is this the same as: exportCompleteIconSet\"\n              }\n  }\n}],\n \"required\": [\"conversionType\"],\n  \"definitions\": {\n    \"baseOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"srcFiles\": {\n          \"type\": \"array\",\n          \"description\": \"Input files matching the given filename pattern.\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"default\": \"['*.svg']\"\n        },\n        \"outputDirectory\": {\n          \"type\": \"string\",\n          \"description\": \"Name of the output directory.\",\n          \"default\": \"\\\"./dist\\\"\"\n        },\n        \"svgoConfig\": {\n          \"type\": \"object\",\n          \"description\": \"A path to your svgoConfiguration JSON file or an inline configuration object.\"\n        },\n        \"delimiter\": {\n          \"type\": \"string\",\n          \"description\": \"Delimiter which is used to generate the types and name properties.\",\n          \"default\": \"SNAKE\",\n          \"enum\": [\"CAMEL\", \"KEBAB\", \"SNAKE\", \"UPPER\"]\n        }\n      },\n      \"required\": [\"srcFiles\", \"outputDirectory\", \"svgoConfig\", \"delimiter\"]\n    }\n  },\n  \"additionalProperties\": false\n}\n</code></pre>\n<h2><code>$ref</code> and <code>$id</code></h2>\n<p>Must be full uri for external schemas.</p>\n<h2>Conditional schemas</h2>\n<p><a href=\"https://json-schema.org/understanding-json-schema/reference/conditionals.html\">https://json-schema.org/understanding-json-schema/reference/conditionals.html</a></p>\n<p>Great to combine schemas, not supported in <code>json2ts</code></p>\n<pre><code class=\"language-javascript\">{\n  \"$schema\": \"http://json-schema.org/schema\",\n  \"type\": \"object\",\n  \"title\": \"SvgToTsBuilder\",\n  \"description\": \"The svg-icons-builder is a Angular builder for the svg-to-ts project. It can be used to convert SVG icons inside an Angular library or SPA to an object, to constants or even to individual TypeScript or JavaScript files\",\n  \"properties\": {\n    \"conversionType\": {\n      \"type\": \"string\",\n      \"description\": \"Converting your icons to a single object, converting your icons to constants or converting your icons to single files.\",\n      \"default\": \"constants\",\n      \"enum\": [\"object\", \"constants\", \"files\"]\n    }\n  },\n  \"allOf\": [\n    {\n      \"if\": {\n        \"properties\": { \"conversionType\": { \"const\": \"constants\" } }\n      },\n      \"then\": {\n        \"allOf\": [\n          { \"$ref\": \"#/definitions/baseOptions\" },\n          {\n            \"properties\": {\n              \"fileName\": {\n                \"type\": \"string\",\n                \"description\": \"File name of the generated constants file.\",\n                \"default\": \"my-icons\"\n              },\n              \"typeName\": {\n                \"type\": \"string\",\n                \"description\": \"Name of the generated type.\",\n                \"default\": \"myIcons\"\n              },\n              \"generateType\": {\n                \"type\": \"boolean\",\n                \"description\": \"Prevent generating enumeration type.\",\n                \"default\": false\n              },\n              \"generateTypeObject\": {\n                \"type\": \"boolean\",\n                \"description\": \"Generate type object.\",\n                \"default\": false\n              },\n              \"generateCompleteIconSet\": {\n                \"type\": \"boolean\",\n                \"description\": \"TODO: is this the same as: exportCompleteIconSet\",\n                \"default\": false\n              },\n              \"exportCompleteIconSet\": {\n                \"type\": \"boolean\",\n                \"description\": \"Specifies if the complete icon set should be exported or not (can be very handy for showcases)\",\n                \"default\": false\n              },\n              \"prefix\": {\n                \"type\": \"string\",\n                \"description\": \"Prefix for the generated svg constants.\",\n                \"default\": \"myIcon\"\n              },\n              \"interfaceName\": {\n                \"type\": \"string\",\n                \"description\": \"Name for the generated interface.\",\n                \"default\": \"MyIcon\"\n              }\n            },\n            \"required\": [\n              \"fileName\",\n              \"typeName\",\n              \"generateType\",\n              \"generateTypeObject\",\n              \"generateCompleteIconSet\",\n              \"prefix\",\n              \"interfaceName\"\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"if\": {\n        \"properties\": { \"conversionType\": { \"const\": \"object\" } }\n      },\n      \"then\": {\n        \"allOf\": [\n          { \"$ref\": \"#/definitions/baseOptions\" },\n          {\n            \"properties\": {\n              \"fileName\": {\n                \"type\": \"string\",\n                \"description\": \"File name of the generated constants file.\",\n                \"default\": \"my-icons\"\n              },\n              \"obejctName\": {\n                \"type\": \"string\",\n                \"description\": \"name of the exported const - if nothing is set - default export will be used\",\n                \"default\": \"icons\"\n              }\n            },\n            \"required\": [\"fileName\", \"objectName\"]\n          }\n        ]\n      }\n    },\n    {\n      \"if\": {\n        \"properties\": { \"conversionType\": { \"const\": \"files\" } }\n      },\n      \"then\": {\n        \"allOf\": [\n          { \"$ref\": \"#/definitions/baseOptions\" },\n          {\n            \"properties\": {\n              \"typeName\": {\n                \"type\": \"string\",\n                \"description\": \"Name of the generated type.\",\n                \"default\": \"myIcons\"\n              },\n              \"generateType\": {\n                \"type\": \"boolean\",\n                \"description\": \"Prevent generating enumeration type.\",\n                \"default\": false\n              },\n              \"generateTypeObject\": {\n                \"type\": \"boolean\",\n                \"description\": \"Generate type object.\",\n                \"default\": false\n              },\n              \"exportCompleteIconSet\": {\n                \"type\": \"boolean\",\n                \"description\": \"Specifies if the complete icon set should be exported or not (can be very handy for showcases)\",\n                \"default\": false\n              },\n              \"prefix\": {\n                \"type\": \"string\",\n                \"description\": \"Prefix for the generated svg constants.\",\n                \"default\": \"myIcon\"\n              },\n              \"interfaceName\": {\n                \"type\": \"string\",\n                \"description\": \"Name for the generated interface.\",\n                \"default\": \"MyIcon\"\n              },\n              \"modelFileName\": {\n                \"type\": \"string\",\n                \"description\": \"\",\n                \"default\": \"my-icons.model\"\n              },\n              \"additionalModelOutputPath\": {\n                \"type\": \"string\",\n                \"description\": \"if a path is specified we will generate an additional file containing interface and type to this path - can be useful to improve type safety\"\n              },\n              \"iconsFolderName\": {\n                \"type\": \"string\",\n                \"description\": \"name of the folder we will build the TypeScript files to\",\n                \"default\": \"build\"\n              },\n              \"compileSources\": {\n                \"type\": \"boolean\",\n                \"description\": \"If set to false, we generate a TypeScript file for each SVG. If set to true we will allready compile those TypeScript files and generate JavaScript files and declaration files.\",\n                \"default\": false\n              },\n              \"barrelFileName\": {\n                \"type\": \"string\",\n                \"description\": \"name of the generated type\",\n                \"default\": \"index\"\n              }\n            },\n            \"required\": [\n              \"typeName\",\n              \"generateType\",\n              \"generateTypeObject\",\n              \"exportCompleteIconSet\",\n              \"prefix\",\n              \"interfaceName\",\n              \"modelFileName\",\n              \"iconsFolderName\",\n              \"compileSources\",\n              \"barrelFileName\"\n            ]\n          }\n        ]\n      }\n    }\n  ],\n  \"required\": [\"conversionType\"],\n  \"definitions\": {\n    \"baseOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"srcFiles\": {\n          \"type\": \"array\",\n          \"description\": \"Input files matching the given filename pattern.\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"default\": \"['*.svg']\"\n        },\n        \"outputDirectory\": {\n          \"type\": \"string\",\n          \"description\": \"Name of the output directory.\",\n          \"default\": \"\\\"./dist\\\"\"\n        },\n        \"svgoConfig\": {\n          \"type\": \"object\",\n          \"description\": \"A path to your svgoConfiguration JSON file or an inline configuration object.\"\n        },\n        \"delimiter\": {\n          \"type\": \"string\",\n          \"description\": \"Delimiter which is used to generate the types and name properties.\",\n          \"default\": \"SNAKE\",\n          \"enum\": [\"CAMEL\", \"KEBAB\", \"SNAKE\", \"UPPER\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>","frontmatter":{"date":"November 01, 2020","title":"JSON Schema","tags":null}}},"pageContext":{"slug":"/json-schema/"}},"staticQueryHashes":["1796642556","2356112386","3489759178"],"slicesMap":{}}