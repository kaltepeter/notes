{
    "componentChunkName": "component---src-templates-note-template-tsx",
    "path": "/python/",
    "result": {"data":{"markdownRemark":{"html":"<p><a href=\"https://www.computerhope.com/issues/ch001721.htm\">https://www.computerhope.com/issues/ch001721.htm</a> - extracting text</p>\n<p><a href=\"http://docopt.org\">http://docopt.org</a> - cli doc generation</p>\n<h2>Working with pip and default pythons</h2>\n<p>Mac currently comes with both python2 and python 3 installed. Python2 is mapped to the python command. In general avoid depending on system python, however, during machine bootstrapping it's a good start.</p>\n<p><a href=\"https://docs.python-guide.org/starting/install3/osx/\">https://docs.python-guide.org/starting/install3/osx/</a> - convert mac to python3 default</p>\n<pre><code class=\"language-bash\">python --version\npython3 --version\n</code></pre>\n<h2>setup pip</h2>\n<pre><code class=\"language-bash\">python3 -m pip --version # check for pip\npython3 -m ensurepip --default-pip # install default pip\npython3 -m pip install --upgrade pip setuptools wheel # get latest versions\n\n</code></pre>\n<p><a href=\"https://packaging.python.org/en/latest/tutorials/installing-packages/#id21\">https://packaging.python.org/en/latest/tutorials/installing-packages/#id21</a></p>\n<h2>create virtual env</h2>\n<pre><code class=\"language-bash\">python3 -m venv tutorial_env\nsource tutorial_env/bin/activate\n</code></pre>\n<p><a href=\"https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-virtual-environments\">https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-virtual-environments</a></p>\n<h2>Install to user site</h2>\n<p>This works with non sudo permissions</p>\n<pre><code class=\"language-bash\">python3 -m pip install --user SomeProject\n</code></pre>\n<h2>Access pip modules not on path</h2>\n<pre><code class=\"language-bash\"> \"$(python3 -m site --user-base)\"/bin/ansible-playbook\n</code></pre>\n<h2>installing on mac</h2>\n<p><a href=\"https://realpython.com/python-virtual-environments-a-primer/\">https://realpython.com/python-virtual-environments-a-primer/</a></p>\n<p><a href=\"https://www.integralist.co.uk/posts/python-management/#managing-dependencies\">https://www.integralist.co.uk/posts/python-management/#managing-dependencies</a> - covers pyenv and versioning</p>\n<p>install pyenv</p>\n<pre><code class=\"language-text\">brew install pyenv\n# run init to complete auto load and follow instructions\npyenv init\n</code></pre>\n<p>example output says add the following to your profile:</p>\n<pre><code class=\"language-text\">eval \"$(pyenv init -)\"\n</code></pre>\n<p>This will auto load correct python version in project directories</p>\n<p>install python versions</p>\n<pre><code class=\"language-text\">pyenv install 3.5.0\npyenv install 3.6.5\n</code></pre>\n<p>set project version</p>\n<pre><code class=\"language-text\"> pyenv local 3.5.0\n</code></pre>\n<p>set global version</p>\n<pre><code class=\"language-bash\">pyenv global 3.9\n</code></pre>\n<p>create venv</p>\n<pre><code class=\"language-text\">python -m venv env\n</code></pre>\n<h3>older option</h3>\n<p><a href=\"https://hackercodex.com/guide/python-development-environment-on-mac-osx/\">https://hackercodex.com/guide/python-development-environment-on-mac-osx/</a></p>\n<p>update from default install</p>\n<pre><code class=\"language-text\">brew install python3\n</code></pre>\n<p>to update pip3</p>\n<pre><code class=\"language-text\">pip3 install --upgrade pip setuptools wheel\n</code></pre>\n<h4>virtual env</h4>\n<p>Python 3 uses venv</p>\n<p><a href=\"https://stackoverflow.com/questions/71106411/how-to-upgrade-python-venv-version\">Upgrade process</a></p>\n<h5>Workflow</h5>\n<ol>\n<li>cd into working directory</li>\n<li>Create <code>python3.10 -m venv venv --prompt .</code></li>\n<li>Activate <code>source venv/bin/activate</code></li>\n<li>Deactivate when done <code>deactivate</code></li>\n</ol>\n<pre><code class=\"language-text\">pip3 install virtualenv\nmkdir -p ~/Projects ~/Virtualenvs ~/Library/Application\\ Support/pip\nvim ~/Library/Application\\ Support/pip/pip.conf\n</code></pre>\n<p>add to file</p>\n<pre><code class=\"language-text\">[install]\nrequire-virtualenv = true\n\n[uninstall]\nrequire-virtualenv = true\n</code></pre>\n<p>create env</p>\n<pre><code class=\"language-text\">virtualenv -p python3 .pyenv\n</code></pre>\n<p>update or install global packages</p>\n<pre><code class=\"language-text\">gpip install --upgrade pip setuptools wheel virtualenv\n</code></pre>\n<p>activate virtualenv</p>\n<pre><code class=\"language-text\">cd .pyenv\nsource bin/activate\n</code></pre>\n<h2>package dependencies</h2>\n<p><del><a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\">http://docs.python-guide.org/en/latest/dev/virtualenvs/</a></del></p>\n<pre><code class=\"language-bash\">pip freeze > requirements.txt # freeze all\npip install -r requirements.txt # install all fresh\n</code></pre>\n<h2>tools</h2>\n<h3>linting</h3>\n<p><a href=\"https://blog.sideci.com/about-style-guide-of-python-and-linter-tool-pep8-pyflakes-flake8-haking-pyling-7fdbe163079d\">https://blog.sideci.com/about-style-guide-of-python-and-linter-tool-pep8-pyflakes-flake8-haking-pyling-7fdbe163079d</a></p>\n<h3>packages</h3>\n<p>pylint: <code>pip install pylint</code></p>\n<p>pep8: <code>pip install pep8</code></p>\n<p>autopep8: <code>pip install autopep8</code></p>\n<p>pyocr: <code>pip install pyocr</code></p>\n<h3>install imagemagick for wand</h3>\n<p><a href=\"https://stackoverflow.com/questions/37011291/python-wand-image-is-not-recognized\">https://stackoverflow.com/questions/37011291/python-wand-image-is-not-recognized</a></p>\n<p>use version 6 until 7 is ready</p>\n<pre><code class=\"language-text\">brew install imagemagick@6\nbrew link imagemagick@6 --force\npip install Wand\n</code></pre>\n<p>add following to .profile or .zshrc, .bashrc, etch</p>\n<pre><code class=\"language-text\">export MAGICK_HOME=\"/usr/local/opt/imagemagick@6\"\n\nexport PATH=\"$MAGICK_HOME/bin:$PATH\"\n</code></pre>\n<p>symlink lib</p>\n<p>ln -s $MAGICK_HOME/lib/libMagickWand-6.Q16.dylib /usr/local/lib/libMagickWand.dylib</p>\n<p>install ghostscript</p>\n<pre><code class=\"language-text\">brew install ghostscript\n</code></pre>\n<h2>PDFs</h2>\n<p>tutorials: <a href=\"http://stanford.edu/~mgorkove/cgi-bin/rpython_tutorials/tutorials.php\">http://stanford.edu/~mgorkove/cgi-bin/rpython_tutorials/tutorials.php</a></p>\n<h2>dependency management</h2>\n<p><a href=\"https://python-poetry.org/\">https://python-poetry.org/</a></p>\n<h2>Formatting</h2>\n<p>Prettier plugin deprecated for black</p>\n<p><a href=\"https://github.com/psf/black\">https://github.com/psf/black</a></p>\n<pre><code class=\"language-bash\">pip install black\n</code></pre>\n<h2>Enums</h2>\n<pre><code class=\"language-python\">class NodeType(Enum):\n    F = \"FILE\"\n    D = \"DIR\"\n\nprint(NodeType.F)\n</code></pre>\n<h2>Tuple</h2>\n<p><code>('root',)</code> is valid\n<code>('root')</code> is not valid, the comma makes the tuple</p>\n<p>remove last item (<a href=\"https://www.geeksforgeeks.org/python-program-to-remove-last-element-from-tuple/\">https://www.geeksforgeeks.org/python-program-to-remove-last-element-from-tuple/</a>)</p>\n<pre><code class=\"language-python\">tu = (1, 2, 3, 4, 5)\ntu = list(tu)\ntu.pop()\ntu = tuple(tu)\nprint(tu) # (1, 2, 3, 4)\n</code></pre>\n<h3>append</h3>\n<pre><code class=\"language-python\">tu = (1,2,3,4)\ntu += (5,)\nprint(tu) # \n</code></pre>\n<h2>Dict</h2>\n<p>Using a tuple as key:</p>\n<pre><code class=\"language-python\">list = {('root', 'a', 'b'): 80, ('root', 'a'): 20, ('root',): 100}\n</code></pre>\n<p>has item</p>\n<pre><code class=\"language-python\">list = {('root', 'a', 'b'): 80, ('root', 'a'): 20, ('root',): 100}\nif ('root', 'a') in list:\n    print(\"found\")\n</code></pre>\n<p>Merging</p>\n<p><a href=\"https://peps.python.org/pep-0584/\">https://peps.python.org/pep-0584/</a></p>\n<pre><code class=\"language-python\">d = {'spam': 1, 'eggs': 2, 'cheese': 3}\ne = {'cheese': 'cheddar', 'aardvark': 'Ethel'}\nprint(d | e) # {'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}\nprint(e | d) # {'cheese': 3, 'aardvark': 'Ethel', 'spam': 1, 'eggs': 2}\n\nd |= e # in place\nprint(d) # {'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}\n</code></pre>\n<p>getting a value deep in dict (<a href=\"https://pypi.org/project/dpath/\">https://pypi.org/project/dpath/</a>)</p>\n<pre><code class=\"language-bash\">pip install dpath\n</code></pre>\n<pre><code class=\"language-python\">import dpath\nfrom enum import Enum\n\n\nclass NodeType(Enum):\n    F = \"FILE\"\n    D = \"DIR\"\n\n\nfile_tree = {\n        \"root\": {\n        \"name\": \"root\",\n        \"size\": 0,\n        \"type\": NodeType.D,\n        \"children\": {\n            \"a\": {\n                \"name\": \"a\",\n                \"size\": 0,\n                \"type\": NodeType.D,\n                \"children\": {\n                    \"e\": {\n                        \"name\": \"e\",\n                        \"size\": 0,\n                        \"type\": NodeType.D,\n                        \"children\": {\n                            \"i\": {\n                                \"name\": \"i\",\n                                \"size\": 584,\n                                \"type\": NodeType.F,\n                                \"children\": {},\n                            },\n                        },\n                    },\n                }\n            }\n        }\n    }\n}\n\ncur_path = ['root', 'a', 'e']\n\ntarget_node = dpath.get(file_tree, \"/children/\".join(cur_path))[\"children\"]\nprint(target_node) # {'i': {'name': 'i', 'size': 584, 'type': &#x3C;NodeType.F: 'FILE'>, 'children': {}}}\n</code></pre>\n<h3>TypeError 'set' object does not support item assignment</h3>\n<p><a href=\"https://stackoverflow.com/questions/40553742/typeerror-set-object-does-not-support-item-assignment\">https://stackoverflow.com/questions/40553742/typeerror-set-object-does-not-support-item-assignment</a></p>\n<p>Both dictionaries and sets use the same syntax. Be careful when initializing them.</p>\n<h2>Typing</h2>\n<p>Tuple with variable length <code>Tuple[int, ...]</code></p>\n<h2>Loops</h2>\n<p>loop through list while reducing</p>\n<pre><code class=\"language-python\">guest = ['john', 'phil', 'andy', 'mark', 'frank', 'joe']\nwhile len(guest) > 2:\n    popped_guest = guest.pop()\n</code></pre>\n<p>loop through dict</p>\n<pre><code class=\"language-python\">items = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' }\nfor key, value in items.items():\n    print(f\"k: {key}, v: {value}\")\n</code></pre>\n<h2>destructuring</h2>\n<pre><code class=\"language-python\">head, *tail = [1, 2, 3, 4, 5]\nprint(head)  # 1\nprint(tail)  # [2, 3, 4, 5]\n</code></pre>\n<h2>Eval</h2>\n<pre><code class=\"language-python\">def get_fn(old: int, op: str) -> int:\n    return eval(op)\n\nprint(get_fn(79, \"old * old\")) # 6241\n</code></pre>\n<h2>Image Generation</h2>\n<p><a href=\"https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.new\">https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.new</a></p>\n<p><a href=\"https://dev.to/petercour/generate-images-with-python-pil-302k\">https://dev.to/petercour/generate-images-with-python-pil-302k</a></p>\n<p><a href=\"https://blog.devgenius.io/ascii-art-library-for-python-b37b45ed72fd\">https://blog.devgenius.io/ascii-art-library-for-python-b37b45ed72fd</a></p>\n<p><a href=\"https://towardsdatascience.com/create-simple-optical-character-recognition-ocr-with-python-6d90adb82bb8\">https://towardsdatascience.com/create-simple-optical-character-recognition-ocr-with-python-6d90adb82bb8</a></p>\n<h2>Numbers</h2>\n<p><a href=\"https://stackoverflow.com/questions/2104884/how-does-python-manage-int-and-long\">https://stackoverflow.com/questions/2104884/how-does-python-manage-int-and-long</a></p>\n<pre><code class=\"language-python3\">import sys\nsys.maxsize # 9223372036854775807\n</code></pre>\n<p>Too large number:</p>\n<pre><code class=\"language-bash\">ValueError('Exceeds the limit (4300) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit'\n</code></pre>\n<h2>Functools</h2>\n<p><a href=\"https://www.geeksforgeeks.org/functools-module-in-python/\">https://www.geeksforgeeks.org/functools-module-in-python/</a></p>\n<h2>Higher order functions (Partial)</h2>\n<pre><code class=\"language-python\">def get_fn(op: Tuple[str, str, str]) -> Callable[[str | int, str | int], int]:\n    left_item = int(op[0]) if op[0] != \"old\" else None\n    right_item = int(op[2]) if op[2] != \"old\" else None\n    match op[1]:\n        case \"*\":\n            return partial(multiply, a=left_item, b=right_item)\n        case \"+\":\n            return partial(add, a=left_item, b=right_item)\n        case _:\n            raise ValueError(f\"Unknown instruction {op[1]}\")\n\ndef test_get_fn():\n    monkey_0_op = get_fn((\"old\", \"*\", \"19\"))\n    monkey_1_op = get_fn((\"old\", \"+\", \"6\"))\n    monkey_2_op = get_fn((\"old\", \"*\", \"old\"))\n    assert monkey_0_op(a=79) == 1501\n    assert monkey_1_op(a=54) == 60\n    assert monkey_2_op(a=79, b=79) == 6241\n</code></pre>\n<h2>Performance</h2>\n<ul>\n<li><a href=\"https://medium.com/analytics-vidhya/python-efficiency-reduce-computing-time-and-memory-usage-72129e94ff64\">https://medium.com/analytics-vidhya/python-efficiency-reduce-computing-time-and-memory-usage-72129e94ff64</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/memory-profiling-in-python-using-memory_profiler/\">https://www.geeksforgeeks.org/memory-profiling-in-python-using-memory_profiler/</a></li>\n<li><a href=\"https://www.python.org/doc/essays/list2str/\">https://www.python.org/doc/essays/list2str/</a></li>\n<li><a href=\"https://wiki.python.org/moin/PythonSpeed/PerformanceTips\">https://wiki.python.org/moin/PythonSpeed/PerformanceTips</a></li>\n<li><a href=\"https://towardsdatascience.com/profiling-and-analyzing-performance-of-python-programs-3bf3b41acd16\">https://towardsdatascience.com/profiling-and-analyzing-performance-of-python-programs-3bf3b41acd16</a></li>\n</ul>\n<h3>Use Numpy for large number math</h3>\n<p>slow:</p>\n<pre><code class=\"language-python\">def multiply(a: int, b: int) -> int:\n    return a * b\n\n\ndef add(a: int, b: int) -> int:\n    return a + b\n</code></pre>\n<p>significantly faster:</p>\n<pre><code class=\"language-python\">def multiply(a: int, b: int) -> int:\n    return np.multiply(a, b)\n\n\ndef add(a: int, b: int) -> int:\n    return np.add(a, b)\n</code></pre>\n<h3>Use caching</h3>\n<pre><code class=\"language-python\">from functools import lru_cache, partial\n\n@lru_cache(maxsize=None)\ndef run_fn_with_args(\n    item: int, op: Callable[[str | int, str | int], int], args: Tuple[str, ...]\n) -> int:\n    new = 0\n    if (\"a\",) == args:\n        new = op(a=item)\n    elif (\"b\",) == args:\n        new = op(b=item)\n    elif (\n        \"a\",\n        \"b\",\n    ) == args:\n        new = op(a=item, b=item)\n    else:\n        raise ValueError(f\"Unknown args {op['old_args']}\")\n\n    return new\n\n new = run_fn_with_args(item, op, monkey[\"old_args\"])\n</code></pre>\n<h2>Immutable Data</h2>\n<pre><code class=\"language-python\">from copy import deepcopy\nmonkeys = process_input(os.path.join(base_path, \"input.txt\"))\ndeepcopy(monkeys)\n</code></pre>\n<h2>list of things</h2>\n<pre><code class=\"language-python\">from itertools import chain\n\nprint([a for a in range(ord('a'), ord('z')+1)])\n# [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]\nprint([chr(a) for a in range(ord('a'), ord('z')+1)])\n# ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n# flatten list\ntest_list = ['gfg', 1, [5, 6, 'geeks'], 67.4, [5], 'best']\nres = list(chain(*[ele if isinstance(ele, list)\n                   else [ele] for ele in test_list]))\nprint(res)\n# [‘gfg’, 1, 5, 6, ‘geeks’, 67.4, 5, ‘best’]\n</code></pre>\n<h2>Packages and Imports</h2>\n<p><a href=\"https://towardsdatascience.com/understanding-python-imports-init-py-and-pythonpath-once-and-for-all-4c5249ab6355\">https://towardsdatascience.com/understanding-python-imports-init-py-and-pythonpath-once-and-for-all-4c5249ab6355</a></p>\n<p><a href=\"https://stackoverflow.com/questions/54598292/modulenotfounderror-when-trying-to-import-module-from-imported-package\">https://stackoverflow.com/questions/54598292/modulenotfounderror-when-trying-to-import-module-from-imported-package</a></p>\n<p><a href=\"https://realpython.com/absolute-vs-relative-python-imports/\">https://realpython.com/absolute-vs-relative-python-imports/</a></p>\n<ol>\n<li>Create a <code>__init__.py</code> in each dir.</li>\n<li>export pythonpath var</li>\n</ol>\n<pre><code class=\"language-bash\">export PYTHONPATH=$PYTHONPATH:$(pwd)\n</code></pre>\n<h2>sorting</h2>\n<p><a href=\"https://learnpython.com/blog/python-custom-sort-function/\">https://learnpython.com/blog/python-custom-sort-function/</a></p>\n<p>Custom sort function. As of python3 use cmp_to_key to pass function.</p>\n<p>return 1 if pair1 > pair2\nreturn 0 if x == y\nreturn -1 if pair1 &#x3C; pair2</p>\n<pre><code class=\"language-python\">from functools import cmp_to_key\n \ndef compare(pair1, pair2):\n    number1, word1 = pair1\n    number2, word2 = pair2\n    if number1 == number2:\n        if word1 &#x3C; word2:\n            return -1\n        else:\n            return 1\n    if number1 &#x3C; number2:\n        return -1\n    else:\n        return 1\n \ncompare_key = cmp_to_key(compare)\ns_list = sorted(my_list, key=compare_key)\n</code></pre>\n<h2>Zip</h2>\n<p>Unequal lists default to ignored, it stops processing. Pass <code>strict=True</code> to raise exception.</p>\n<pre><code class=\"language-python\">integers = [1, 2, 3]\nletters = ['a', 'b', 'c']\nfloats = [4.0, 5.0, 6.0]\nzipped = zip(integers, letters, floats)\nprint(list(zipped))\n# [(1, 'a', 4.0), (2, 'b', 5.0), (3, 'c', 6.0)]\n</code></pre>\n<p>To keep all pairs with uneven, use <code>zip_longest</code></p>\n<pre><code class=\"language-python\">from itertools import zip_longest\n\nnumbers = [1, 2, 3]\nletters = ['a', 'b', 'c']\nlongest = range(5)\nzipped = zip_longest(numbers, letters, longest, fillvalue='?')\nprint(list(zipped))\n# [(1, 'a', 0), (2, 'b', 1), (3, 'c', 2), ('?', '?', 3), ('?', '?', 4)]\n</code></pre>\n<h2>Debugging</h2>\n<p><a href=\"https://python.land/python-debugger\">https://python.land/python-debugger</a></p>\n<pre><code class=\"language-python\">import pdb\n\nbreakpoint()\n</code></pre>\n<p>commands:</p>\n<pre><code class=\"language-bash\">c # continue\ns # step\np # print\npp # pretty print\nn # next\n</code></pre>\n<h2>operators</h2>\n<p><code>//</code> floor division, same as <code>math.floor(15/4)</code></p>\n<p><code>15 / 4</code> = 3.75\n<code>15 // 4</code> = 3</p>\n<h2>Set</h2>\n<p><a href=\"https://realpython.com/python-sets/\">https://realpython.com/python-sets/</a></p>","frontmatter":{"date":"July 19, 2020","title":"Python","tags":["language"]}}},"pageContext":{"slug":"/python/"}},
    "staticQueryHashes": ["1929983096","3649515864"]}