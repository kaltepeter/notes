{"componentChunkName":"component---src-templates-note-template-tsx","path":"/node/","result":{"data":{"markdownRemark":{"html":"<h2>generators</h2>\n<h3>npm init</h3>\n<p>simple and built in</p>\n<p><a href=\"https://docs.npmjs.com/cli/init\">https://docs.npmjs.com/cli/init</a></p>\n<p><a href=\"https://github.com/npm/init-package-json\">https://github.com/npm/init-package-json</a></p>\n<p><code>npm init &#x3C;initializer></code>can be used to set up a new or existing npm package.</p>\n<p><code>initializer</code>in this case is an npm package named<code>create-&#x3C;initializer></code>, which will be installed by<a href=\"https://docs.npmjs.com/cli/npx\"><code>npx</code></a>, and then have its main bin executed -- presumably creating or updating<code>package.json</code>and running any other initialization-related operations.</p>\n<h3>testing locally</h3>\n<h4>using local npm server</h4>\n<p><a href=\"https://blog.strapi.io/testing-npm-package-before-releasing-it-using-verdaccio-and-ngrok\">https://blog.strapi.io/testing-npm-package-before-releasing-it-using-verdaccio-and-ngrok</a></p>\n<pre><code class=\"language-text\">npm install -g verdaccio\nverdaccio\n\nnpm adduser --registry  http://localhost:4873\n</code></pre>\n<p>add to package.json</p>\n<pre><code class=\"language-text\">  \"publishConfig\": {\n    \"registry\": \"http://localhost:4873\"\n  },\n</code></pre>\n<p>run</p>\n<pre><code class=\"language-text\">npm publish\n</code></pre>\n<h4>npm link FTW</h4>\n<p>with typescript watch. it will auto build and link is still good</p>\n<pre><code class=\"language-javascript\">\"name\": \"@scope/create-myapp\",\n\"version\": \"1.0.0\",\n\"description\": \"starter template for building deliverable apps/libs\",\n\"bin\": {\n  \"create-myapp\": \"./dist/index.js\"\n},\n\"scripts\": {\n     \"watch\": \"npm run build -- -w\"\n}\n</code></pre>\n<pre><code class=\"language-bash\">npm run watch\nnpm link\n\n# from anywhere else use a cli app\ncreate-myapp &#x3C;args> [options]\n</code></pre>\n<h2>shell, exec, execFile, fork</h2>\n<p><a href=\"https://zaiste.net/nodejs-child-process-spawn-exec-fork-async-await/\">https://zaiste.net/nodejs-child-process-spawn-exec-fork-async-await/</a></p>\n<p><a href=\"https://nodejs.org/api/child_process.html\">https://nodejs.org/api/child_process.html</a></p>\n<h3>exec example</h3>\n<pre><code class=\"language-javascript\">const util = require(\"util\");\nconst exec = util.promisify(require(\"child_process\").exec);\n\nconst getVars = async () => {\n  const getVar = async varName => {\n    const { stdout, stderr } = await exec(\n      `zsh -c '. ~/.zshrc; echo $${varName}'`\n    );\n    if (stderr) return reject(stderr);\n    return stdout.toString().trim();\n  };\n\n  const [currentThemeRes, zshCustomRes] = await Promise.all([\n    getVar(\"ZSH_THEME\"),\n    getVar(\"ZSH_CUSTOM\")\n  ]);\n  return [currentThemeRes, zshCustomRes];\n};\n\ntry {\n  const [currentTheme, zshCustom] = await getVars();\n  console.log(`vars: ${currenttheme} ${zshCustom}`);\n} catch (err) {\n  console.log(\"err: \", err);\n}\n</code></pre>\n<h2>fs</h2>\n<p><a href=\"https://dev.to/mrm8488/from-callbacks-to-fspromises-to-handle-the-file-system-in-nodejs-56p2\">https://dev.to/mrm8488/from-callbacks-to-fspromises-to-handle-the-file-system-in-nodejs-56p2</a></p>\n<h2>nvm</h2>\n<h2>env var</h2>\n<p><a href=\"https://medium.com/@maxcbc/mocking-environment-variables-in-node-js-a17a416e127c\">https://medium.com/@maxcbc/mocking-environment-variables-in-node-js-a17a416e127c</a> - mocking</p>\n<h2>child processes</h2>\n<p><a href=\"https://jscomplete.com/learn/node-beyond-basics/child-processes\">https://jscomplete.com/learn/node-beyond-basics/child-processes</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/\">https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/</a></p>","frontmatter":{"date":"November 12, 2019","title":"Node","tags":null}}},"pageContext":{"slug":"/node/"}},"staticQueryHashes":["3649515864"]}